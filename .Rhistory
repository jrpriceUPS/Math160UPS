lower = xbar - tstar*s/sqrt(n)
upper = xbar + tstar*s/sqrt(n)
# if(sidedness == "both"){
#
#   tstar = -qt((1-conf_level)/2,df)
#
#   thing_to_type2 = paste("tstar = 1-qt((1-",format(conf_level,scientific=FALSE),")/2,",format(df,scientific=FALSE),") = ",format(tstar,scientific=FALSE),sep="")
#   thing_to_type3 = paste(toString(xbar)," - ",format(tstar,scientific=FALSE)," x ",format(s,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
#   thing_to_type4 = paste(toString(xbar)," + ",format(tstar,scientific=FALSE)," x ",format(s,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
#
#   lower = xbar - tstar*s/sqrt(n)
#   upper = xbar + tstar*s/sqrt(n)
# }
#
# if(sidedness == "less"){
#
#   tstar = qt(conf_level,df)
#
#   thing_to_type2 = paste("tstar = qt(",format(conf_level,scientific=FALSE),",",format(df,scientific=FALSE),") = ",format(tstar,scientific=FALSE),sep="")
#   thing_to_type3 = "-Infinity"
#   thing_to_type4 = paste(toString(xbar)," + ",format(tstar,scientific=FALSE)," x ",format(s,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
#
#   lower = -Inf
#   upper = xbar + tstar*s/sqrt(n)
# }
#
# if(sidedness == "greater"){
#   tstar = qt(conf_level,df)
#
#   thing_to_type2 = paste("tstar = qt(",format(conf_level,scientific=FALSE),",",format(df,scientific=FALSE),") = ",format(tstar,scientific=FALSE),sep="")
#   thing_to_type3 = paste(toString(xbar)," - ",format(tstar,scientific=FALSE)," x ",format(s,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
#   thing_to_type4 = "Infinity"
#
#   lower = xbar - tstar*s/sqrt(n)
#   upper = Inf
#
# }
if(mu_0!="NA"){
cat("Your t-statistic is:")
cat("\n")
cat(paste("t  = (",format(xbar,scientific=FALSE),"-",format(mu_0,scientific=FALSE),")/(",format(s,scientific=FALSE),"/sqrt(",format(n,scientific=FALSE),")) = ",format(t,scientific=FALSE),sep=""))
cat("\n")
cat("\n")
cat(paste("The probability of getting this result or more extreme for xbar\nif mu really is ",toString(mu_0)," is",sep=""))
cat("\n")
cat(paste("p = ",format(out$prob,scientific=FALSE)))
cat("\n")
cat("\n")
cat("You can get this result by typing:")
cat("\n")
cat(out$p_value_type)
cat("\n")
cat("\n")
cat("\n")}
cat(paste("The ",toString(conf_level*100),"% confidence interval for the population mean is",sep=""))
cat("\n")
cat(paste(format(lower,scientific=FALSE)," < mu < ",format(upper,scientific=FALSE)))
cat("\n")
cat("\n")
cat("You can get this result by finding:")
cat("\n")
cat(thing_to_type2)
cat("\n")
cat("\n")
cat("and then calculating:")
cat("\n")
cat(paste(thing_to_type3," and ",thing_to_type4))
if(vec=="whole"){
cat("\n")
cat("\n")
cat("\n")
cat("Or, since you have the whole dataset, you could just type:")
cat("\n")
if(sidedness=="both"){
cat(paste("t.test(",varname,",mu = ",format(mu_0,scientific=FALSE),",conf.level = ",toString(conf_level),")",sep=""))
}
}
}
}
stat.test()
t_test()
t.test(after,before, conf.level = 0.9)
t_test()
(10-10) - 1.685954 * 0.2247221
lecture = c(12.25,18,3.5,7,-.25)
active = c(86,85,93,92.5,88,43)
t.test(lecture,active)
t.test(active,lecture)
stat.test()
t_test()
t_test()
postActive = c(87,95.5,100,99,91,75)
t.test(postActive, mu = 90)
pre = c(.25,2,3,0,10)
post = c(12.5,20,6.5,7,9.75)
t.test(post-pre)
t.test(post-pre,mu = 12)
post2 = c(87,95.5,100,99,91,75)
pre2 = c(1,10.5,7,6.5,3,32)
t.test(post2-pre2,post-pre)
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
plot(students$YoungestParent,students$OldestParent)
linreg()
find_residuals()
model = lm(students$OldestParent~students$YoungestParent)
plot(students$YoungestParent,resid(model))
plot(students$YoungestParent,resid(model),complete.obs = TRUE)
model
model$xlevels
model$fitted.values
resid(model,na.action=na.exclude)
resid(model)
?resid
x = students$YoungestParent
y = students$OldestParent
lm(y ~ x)
model = lm(y ~ x)
regress = model
resid(regress,na.action=na.exclude)
resid(regress)
plot(x,resid(regress))
x
y
regress
#' Find Residuals
#'
#' This function allows you to find and plot the residuals from a linear fit of two datasets.
#' @export
#' @examples
#' > x = c(1,2,3,4,5,6,7)
#' > y = c(2.5,5.1,6.4,8.4,10.8,13.4,15.3)
#' > find_residuals()
#' What is the name of the list with your x variable? x
#' What is the name of the list with your y variable? y
#' The best fit line for these data is:
#'   y = 2.12142857142857 x (x) + 0.357142857142856
#'
#'
#' You can find the residuals by saving the model:
#'   model = lm(y~x)
#'
#' and then typing:
#'   resid(model))
#'
#' To plot them, type:
#'   plot(x,resid(model))
find_residuals <- function(){
cat("What is the name of the list with your x variable? \n")
varname1 = readline()
cat("What is the name of the list with your y variable? \n")
varname2 = readline()
if(grepl("$", varname1, fixed=TRUE)){
names = strsplit(varname1,"\\$")
frame = get(names[[1]])
x = frame[[names[[1]][2]]]
} else{
x = get(varname1)}
if(grepl("$", varname2, fixed=TRUE)){
names = strsplit(varname2,"\\$")
frame = get(names[[1]])
y = frame[[names[[1]][2]]]
} else{
y = get(varname2)}
xnew = x[!is.na(x)&!is.na(y)]
ynew = y[!is.na(x)&!is.na(y)]
x = xnew
y = ynew
regress = lm(y ~ x)
intercept = as.numeric(coefficients(regress)[1])
slope = as.numeric(coefficients(regress)[2])
cat(paste("The best fit line for these data is:"))
cat("\n")
cat(paste(varname2," = ",toString(slope)," x (",varname1,") + ",toString(intercept),sep=""))
cat("\n")
cat("\n")
cat("\n")
cat(paste("You can find the residuals by saving the model:"))
cat("\n")
cat(paste("model = lm(",varname2,"~",varname1,")",sep=""))
cat("\n")
cat("\n")
cat(paste("and then typing:"))
cat("\n")
cat(paste("resid(model)"))
print(resid(regress))
cat("\n")
cat("\n")
cat(paste("To plot them, you first need to remove all NAs from ",varname1," and ",varname2," (beyond the scope of this course), then type:\n"))
cat(paste("plot(",varname1,",resid(model))",sep=""))
plot(x,resid(regress),xlab=varname1,ylab="Residual")
}
find_residuals()
#' Find Residuals
#'
#' This function allows you to find and plot the residuals from a linear fit of two datasets.
#' @export
#' @examples
#' > x = c(1,2,3,4,5,6,7)
#' > y = c(2.5,5.1,6.4,8.4,10.8,13.4,15.3)
#' > find_residuals()
#' What is the name of the list with your x variable? x
#' What is the name of the list with your y variable? y
#' The best fit line for these data is:
#'   y = 2.12142857142857 x (x) + 0.357142857142856
#'
#'
#' You can find the residuals by saving the model:
#'   model = lm(y~x)
#'
#' and then typing:
#'   resid(model))
#'
#' To plot them, type:
#'   plot(x,resid(model))
find_residuals <- function(){
cat("What is the name of the list with your x variable? \n")
varname1 = readline()
cat("What is the name of the list with your y variable? \n")
varname2 = readline()
if(grepl("$", varname1, fixed=TRUE)){
names = strsplit(varname1,"\\$")
frame = get(names[[1]])
x = frame[[names[[1]][2]]]
} else{
x = get(varname1)}
if(grepl("$", varname2, fixed=TRUE)){
names = strsplit(varname2,"\\$")
frame = get(names[[1]])
y = frame[[names[[1]][2]]]
} else{
y = get(varname2)}
xnew = x[!is.na(x)&!is.na(y)]
ynew = y[!is.na(x)&!is.na(y)]
x = xnew
y = ynew
regress = lm(y ~ x)
intercept = as.numeric(coefficients(regress)[1])
slope = as.numeric(coefficients(regress)[2])
cat(paste("The best fit line for these data is:"))
cat("\n")
cat(paste(varname2," = ",toString(slope)," x (",varname1,") + ",toString(intercept),sep=""))
cat("\n")
cat("\n")
cat("\n")
cat(paste("You can find the residuals by saving the model:"))
cat("\n")
cat(paste("model = lm(",varname2,"~",varname1,")",sep=""))
cat("\n")
cat("\n")
cat(paste("and then typing:"))
cat("\n")
cat(paste("resid(model)"))
print(resid(regress))
cat("\n")
cat("\n")
cat(paste("To plot them, you first need to remove all NAs from",varname1,"and",varname2,"\n(beyond the scope of this course), then type:\n"))
cat(paste("plot(",varname1,",resid(model))",sep=""))
plot(x,resid(regress),xlab=varname1,ylab="Residual")
}
find_residuals()
41+.59*85
98.6 - (41+.59*85)
41+.59*95.5
98.6 - (41+.59*95.5)
94 - (41+.59*95.5)
plot(students$SATM,students$SATR)
plot(students$SATM,students$SATR, xlab = "SAT Math Score", ylab = "SAT Reading Score")
cor(students$SATM,students$SATR)
?cor
cor(students$SATM,students$SATR,na.rm = TRUE)
cor(students$SATM,students$SATR, use = "complete.obs")
update_code()
rm(list = ls())
library(Math160UPS)
data(students)
cor(students$ShoeSz,students$Height,use = "complete.obs")
plot(x,resid(regress),xlab=varname1,ylab="Residual")
source('~/Dropbox/Teaching/Math 160/Math160UPS/R/find_residuals.R', echo=TRUE)
find_residuals()
abline(0)
abline(0,0)
update_code()
update_code()
update_code()
update_code()
View(find_residuals)
rm("find_residuals")
find_residuals()
abline(0,0)
NEA = c(-94,-57,-29,135,143,151,245,355,392,473,486,535,571,580,620,690)
fat = c(4.2,3,3.7,2.7,3.2,3.6,2.4,1.3,3.8,1.7,1.6,2.2,1,0.4,2.3,1.1)
linreg()
find_residuals()
abline(0,0)
plot(students$ShoeSz,students$Height)
cor(students$ShoeSz,students$Height, use = "complete.obs")
linreg()
1.83039754216219 * 9 + 50.6239384375693
find_residuals()
plot(students$YoungestParent,students$OldestParent)
cor(students$YoungestParent,students$OldestParent, use = "complete.obs")
linreg()
0.804402164680758*52 + 13.5766495983692
find_residuals()
data(SAT)
cor(SAT$Spending,SAT$Score,use = "complete.obs")
linreg()
lattice::xyplot(Score ~ Spending,data = SAT)
lattice::xyplot(Score ~ Spending,data = SAT, type = c(pl","r"))
lattice::xyplot(Score ~ Spending,data = SAT, type = c("p","r"))
head(SAT)
data(SATclass)
head(SATclass)
lattice::xyplot(Score ~ Spending, groups = Level, data = SATclass, type = c("p","r"))
lattice::xyplot(Score ~ Spending, groups = Level, data = SATclass, type = c("p","r"), legend = TRUE)
lattice::xyplot(Score ~ Spending, groups = Level, data = SATclass, type = c("p","r"), auto.key = TRUE)
plot(students$HSGPA,students$UPSGPA)
plot(students$HSGPA,students$UPSGPA, xlab = "High School GPA",ylab = "UPS GPA")
cor(students$HSGPA,students$UPSGPA,use = "complete.obs")
linreg()
0.68135984112255*3.72 + 0.811311142942809
find_residuals()
sqrt(.6466)
flies = read.csv(file.choose())
head(flies)
lattice::densityplot(~Longevity, groups = CompanionNumber, data = flies, auto.key = TRUE)
anovaModel = lm(Longevity~CompanionNumber, data = flies)
summary(anovaModel)
TukeyHSD(aov(anovaModel))
lattice::xyplot(Longevity~Thorax, groups = CompanionNumber, auto.key = TRUE, data = flies)
lattice::xyplot(Longevity~Thorax, groups = CompanionNumber, auto.key = TRUE, data = flies, type = c("r","p"))
ancovaModel = lm(Longevity ~ CompanionNumber*Thorax, data = flies)
summary(ancovaModel)
ancovaModel = lm(Longevity ~ CompanionNumber + Thorax, data = flies)
summary(ancovaModel)
t_dist_demo()
library("Math160UPS")
t_dist_demo()
t_dist_demo = function(n = 4,numstudents = "N",section_name = "section"){
students = get("students")
sleep = students$Sleep[!is.na(students$Sleep)]
trueMean = mean(sleep)
trueSD = sd(sleep)/sqrt(n)
if(numstudents == "N"){
section = get(section_name)
ts = rep(0,length(section))
for (i  in 1:length(section)){
current = sample(sleep,n)
cat(paste(section[i],": ",toString(current),"\n",sep=""))
ts[i] = (mean(current) - trueMean)/(sd(current)/sqrt(n))
}
cat("\nThe true mean is: ",sprintf("%1.3f", trueMean)," hours.\n\n",sep = "")
cat("Calculate your t-statistic t = (xbar - ",sprintf("%1.3f", trueMean),") / (s / sqrt(",toString(n),"))\n\n",sep = "")
viz = readline("Do you want to see a visualization?\n")
if(viz == "Yes" | viz == "y" | viz == "yes" | viz == "Y"){
hist(ts,freq = FALSE, breaks = 5, main = "Histogram of t-statistics", xlim = c(-7,7))
xgrid = seq(from = -7,to = 7,length.out = 1000)
lines(xgrid,dnorm(xgrid,0,1))
lines(xgrid,dt(xgrid, df = n - 1), col = "red")
}
}
if(numstudents != "N"){
ts = rep(0,numstudents)
for(i in 1:numstudents){
mySample = sample(sleep,n, replace = TRUE)
ts[i] = (mean(mySample) - trueMean)/(sd(mySample)/sqrt(n))
}
hist(ts,freq = FALSE, breaks = 20, main = "Histogram of t-statistics",xlim = c(-7,7))
xgrid = seq(from = -7,to = 7,length.out = 1000)
lines(xgrid,dnorm(xgrid,0,1))
lines(xgrid,dt(xgrid, df = n - 1), col = "red")
}
}
t_dist_demo()
rm(list = ls())
t_dist_dmeo
t_dist_demo()
library("Math160UPS")
t_dist_demo()
update_code()
library("Math160UPS")
t_dist_demo
t_dist_demo()
update_code()
library("Math160UPS")
t_dist_demo()
source('~/Dropbox/Teaching/Math 160/Math160UPS/R/t_dist_demo.R', echo=TRUE)
update_code()
devtools::document()
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
devtools::document()
rm(list = c("t_dist_demo"))
devtools::document()
setwd("~/Dropbox/Teaching/Math 160")
t_dist_demo()
library("Math160UPS")
update_code()
t_dist_demo()
library("Math160UPS")
t_dist_demo()
x = c(1, 2, 3, 4, 5, 6, 7)
t_test()
t_test()
x = c(1, 2, 3, 4, 5, 6, 7)
y = c(2.5,  5.1,  6.4,  8.4, 10.8, 13.4, 15.3)
t_test()
t_test()
prop_test()
prop_test()
stat.test()
stat.test()
p_0 = 0.2
n = 10
X = 5
if(n<100){
cols = rep("gray",n+1)
if(X<=p_0*n){
Y = min(c(p_0*n+(p_0*n-X),n))
newX = X
if(X>=p_0*n){
Y = X
newX = max(c(p_0*n-(Y - p_0*n),0))
}
cols = rep("gray",n+1)
cols[1:(newX+1)] = rep("skyblue",newX+1)
cols[(Y+1):(n+1)] = rep("skyblue",n-Y+1)
}
barplot(dbinom(0:n,n,p_0),names = c(0:n),col=cols)
}
cols
newX
X<=p_0*n
X
p_0*n
X>=p_0*n
X
p_0
n
if(n<100){
cols = rep("gray",n+1)
if(X<=p_0*n){
Y = min(c(p_0*n+(p_0*n-X),n))
newX = X}
if(X>=p_0*n){
Y = X
newX = max(c(p_0*n-(Y - p_0*n),0))
}
cols = rep("gray",n+1)
cols[1:(newX+1)] = rep("skyblue",newX+1)
cols[(Y+1):(n+1)] = rep("skyblue",n-Y+1)
barplot(dbinom(0:n,n,p_0),names = c(0:n),col=cols)
}
}
newX
if(n<100){
cols = rep("gray",n+1)
if(X<=p_0*n){
Y = min(c(p_0*n+(p_0*n-X),n))
newX = X}
if(X>=p_0*n){
Y = X
newX = max(c(p_0*n-(Y - p_0*n),0))
}
cols = rep("gray",n+1)
if(newX>0){
cols[1:(newX+1)] = rep("skyblue",newX+1)
}
cols[(Y+1):(n+1)] = rep("skyblue",n-Y+1)
barplot(dbinom(0:n,n,p_0),names = c(0:n),col=cols)
}
source('~/Dropbox/Teaching/Math 160/Math160UPS/R/prop_test.R', echo=TRUE)
stat.test()
stat.test()
stat.test()
x = c(1, 2, 3, 4, 5, 6, 7)
stat.test()
whole
x
3
.95
stat.test()
stat.test()
no
single
stats
4
2.16
7
3
.95
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
chi_test()
chi_test()
x = c(1,2,3,4,5,6,7)
y = c(2.5,5.1,6.4,8.4,10.8,13.4,15.3)
linreg()
find_residuals()
devtools::document()
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
devtools::document()
rm(list = c("prop_test"))
devtools::document()

cat("\n")
cat("For the confidence interval, you would type:")
cat("\n")
cat(paste("prop.test(c(",format(X2,scientific=FALSE),",",format(X1,scientific=FALSE),"), c(",format(n2,scientific=FALSE),",",format(n1,scientific=FALSE),"), alternative = 'two.sided',", "conf.level = ",format(conf_level,scientific=FALSE), ")",sep=""))
}}
}
if(compare=="single"){
n = as.numeric(readline("How many trials were there in your experiment? "))
while(n!=round(n) | n<1){cat('Please choose a whole number greater than zero')
n = as.numeric(readline("How many trials were there in your experiment? "))
}
X = as.numeric(readline("How many successes were there? "))
while(X!=round(X) | X<0 | X>n){cat(paste('Please choose a whole number greater than zero but less than ',toString(n),".",sep=""))
X = as.numeric(readline("How many successes were there? "))}
phat = X/n
s = sqrt(phat*(1-phat)/n)
cat("The statistics for your dataset are: ")
cat("\n")
cat(paste("phat =",format(phat,scientific=FALSE)))
cat("\n")
cat(paste("s = sqrt(",format(phat,scientific=FALSE),"*(1-",format(phat,scientific=FALSE),")/",format(n,scientific=FALSE),") = ",format(s,scientific=FALSE),sep=""))
p_0 = readline("What is the theoretical proportion you are testing against (called p_0)? ")
if(p_0!="NA"){p_0=as.numeric(p_0)}
conf_level = as.numeric(readline("What is your desired confidence level? "))
if(p_0!="NA"){
sidedness = readline("Are you doing a one-sided or two-sided test? Possible answers are 'less', 'greater', and 'two-sided'. ")
sidedness2=sidedness
if(sidedness=="two-sided"){
sidedness = "two.sided"
sidedness2 = "both"
}
out = binom.test(X,n,p=p_0,alternative=sidedness)}
if(p_0!="NA"){
out_conf = binom.test(X,n,p=p_0,alternative="two.sided")}
if(p_0=="NA"){out_conf = binom.test(X,n,p=0.5,alternative="two.sided")}
if(p_0!="NA"){
if(n>=100){
normal_p(X/n, p_0, s, sidedness2, print = FALSE)
}
if(n<100){
cols = rep("gray",n+1)
if(sidedness == "less"){
cols[1:(X+1)] = rep("skyblue",X+1)
}
if(sidedness == "greater"){
cols[(X+1):(n+1)] = rep("skyblue",n-X+1)
}
if(sidedness == "two.sided"){
if(X<=p_0*n){
Y = min(c(p_0*n+(p_0*n-X),n))
}
if(X>=p_0*n){
Y = X
X = max(c(p_0*n-(Y - p_0*n),0))
}
cols = rep("gray",n+1)
cols[1:(X+1)] = rep("skyblue",X+1)
cols[(Y+1):(n+1)] = rep("skyblue",n-Y+1)
}
barplot(dbinom(0:n,n,p_0),names = c(0:n),col=cols)
}
}
if(p_0!="NA"){
cat(paste("The probability of getting this result or more extreme for phat if the proportion really is ",format(p_0,scientific=FALSE)," is ",sep=""))
cat("\n")
cat(paste("p = ",format(out$p.value,scientific=FALSE)))
cat("\n")
cat("\n")}
cat(paste("The ",toString(conf_level*100),"% confidence interval for the population proportion is",sep=""))
cat("\n")
cat(paste(format(out_conf$conf.int[1],scientific=FALSE)," < p < ",format(out_conf$conf.int[2],scientific=FALSE)))
cat("\n")
cat("\n")
cat("\n")
cat("You can get this result by typing:")
cat("\n")
cat(paste("binom.test(x = ",format(X,scientific=FALSE),", n = ",format(n,scientific=FALSE),", p = ",format(p_0,scientific=FALSE),", alternative = '",sidedness,"', conf.level = ", format(conf_level,scientific=FALSE),")",sep=""))
if(p_0!="NA"){
if(sidedness!="two.sided"){
cat("\n")
cat("\n")
cat("For the confidence interval, you would type:")
cat("\n")
cat(paste("binom.test(x = ",format(X,scientific=FALSE),", n = ",format(n,scientific=FALSE),", p = ",format(p_0,scientific=FALSE),", alternative = 'two.sided', conf.level = ", format(conf_level,scientific=FALSE),")",sep=""))
}}
}
}
prop_test()
#' Proportion Test
#'
#' This function asks you a sequence of questions in order to execute a proportion test. It finds a confidence interval and a p-value, produces a plot, and indicates how this could be queried directly from R.
#' @export
#' @examples
#' > prop_test()
#' Do you have a single population or are you comparing populations? Possible answers are 'single' and 'comparing'. single
#' How many trials were there in your experiment? 10
#' How many successes were there? 5
#' The statistics for your dataset are:
#'   phat = 0.5
#' s = sqrt(0.5*(1-0.5)/10) = 0.1581139
#' What is the theoretical proportion you are testing against (called p_0)? .2
#' What is your desired confidence level? .9
#' Are you doing a one-sided or two-sided test? Possible answers are 'less', 'greater', and 'two-sided'. two-sided
#' The probability of getting this result or more extreme for phat if the proportion really is 0.2 is
#' p =  0.0327935
#'
#' The 90% confidence interval for the population proportion is
#' 0.187086  < p <  0.812914
#'
#'
#' You can get this result by typing:
#'   binom.test(x = 0, n = 10, p = 0.2, alternative = 'two.sided', conf.level = 0.9)
#'
#'
#'
#'
#'
#'
#' > prop_test()
#' Do you have a single population or are you comparing populations? Possible answers are 'single' and 'comparing'. comparing
#' How many trials were there in your first sample? 15
#' How many successes were there in your first sample? 10
#' How many trials were there in your second sample? 20
#' How many successes were there in your second sample? 10
#' The statistics for your dataset are:
#'   phat1 = 0.6666667
#' phat2 = 0.5
#' s = sqrt(0.6666667*(1-0.6666667)/15+0.5*(1-0.5)/20) = 0.1652719
#' What is your desired confidence level? .95
#' Are you checking whether the proportion of the second population is less, greater, or different than the proportion of the first population? Possible answers are 'less', 'greater', and 'different'. greater
#' The probability of getting this result or more extreme for phat2 - phat1 if phat1 really is bigger than phat2 is
#' p =  0.739209
#'
#' The 95% confidence interval for the difference in proportions is
#' -0.5489271  < p2 - p1 <  0.2155937
#'
#'
#' You can get this result by typing:
#'   prop.test(c(10,10), c(20,15), alternative = 'greater', conf.level = 0.95)
#'
#' For the confidence interval, you would type:
#'   prop.test(c(10,10), c(20,15), alternative = 'two.sided',conf.level = 0.95)
prop_test <- function(){
compare = readline("Do you have a single population or are you comparing populations? Possible answers are 'single' and 'comparing'. ")
if(compare=="comparing"){
n1 = as.numeric(readline("How many trials were there in your first sample? "))
while(n1!=round(n1) | n1<1){cat('Please choose a whole number greater than zero')
n1 = as.numeric(readline("How many trials were there in your first sample? "))
}
X1 = as.numeric(readline("How many successes were there in your first sample? "))
while(X1!=round(X1) | X1<0 | X1>n1){cat(paste('Please choose a whole number greater than zero but less than ',toString(n1),".",sep=""))
X1 = as.numeric(readline("How many successes were there in your first sample? "))
}
phat1 = X1/n1
n2 = as.numeric(readline("How many trials were there in your second sample? "))
while(n2!=round(n2) | n2<1){cat('Please choose a whole number greater than zero')
n2 = as.numeric(readline("How many trials were there in your second sample? "))
}
X2 = as.numeric(readline("How many successes were there in your second sample? "))
while(X2!=round(X2) | X2<0 | X2>n2){cat(paste('Please choose a whole number greater than zero but less than ',toString(n2),".",sep=""))
X2 = as.numeric(readline("How many successes were there in your second sample? "))
}
phat2 = X2/n2
p = (X1 + X2)/(n1 + n2)
s = sqrt(phat1*(1-phat1)/n1 + phat2*(1-phat2)/n2)
cat("The statistics for your dataset are: ")
cat("\n")
cat(paste("phat1 =",format(phat1,scientific=FALSE)))
cat("\n")
cat(paste("phat2 =",format(phat2,scientific=FALSE)))
cat("\n")
cat(paste("s = sqrt(",format(phat1,scientific=FALSE),"*(1-",format(phat1,scientific=FALSE),")/",format(n1,scientific=FALSE),"+",format(phat2,scientific=FALSE),"*(1-",format(phat2,scientific=FALSE),")/",format(n2,scientific=FALSE),") = ",format(s,scientific=FALSE),sep=""))
cat("\n")
conf_level = as.numeric(readline("What is your desired confidence level? "))
while(conf_level<0 | conf_level>1){cat('Please choose a confidence level between 0 and 1')
conf_level = as.numeric(readline("What is your desired confidence level? "))
}
sidedness = readline("Are you checking whether the proportion of the second population is less, greater, or different than the proportion of the first population? Possible answers are 'less', 'greater', 'different', and 'NA'. ")
sidedness2=sidedness
if(sidedness=="different"){
sidedness = "two.sided"
sidedness2 = "both"
}
if(sidedness!="NA"){
out = prop.test(c(X2,X1),c(n2,n1),alternative=sidedness,conf.level=conf_level)
normal_p(X2/n2-X1/n1, 0, sqrt(p*(1-p)*(1/n1+1/n2)), sidedness2, print = FALSE)}
out_conf = prop.test(c(X2,X1),c(n2,n1),alternative="two.sided",conf.level=conf_level)
if(sidedness=="two.sided"){
first_statement = paste("The probability of getting this result or more extreme for phat2 - phat1 if there really is no difference is")
}
if(sidedness=="less"){
first_statement = paste("The probability of getting this result or more extreme for phat2 - phat1 if phat1 really is bigger than phat2 is")
}
if(sidedness=="greater"){
first_statement = paste("The probability of getting this result or more extreme for phat2 - phat1 if phat1 really is bigger than phat2 is")
}
if(sidedness!="NA"){
cat(first_statement)
cat("\n")
cat(paste("p = ",format(out$p.value,scientific=FALSE)))
cat("\n")
cat("\n")}
cat(paste("The ",toString(conf_level*100),"% confidence interval for the difference in proportions is",sep=""))
cat("\n")
cat(paste(format(out_conf$conf.int[1],scientific=FALSE)," < p2 - p1 < ",format(out_conf$conf.int[2],scientific=FALSE)))
if(sidedness!="NA"){cat("\n")
cat("\n")
cat("\n")
cat("You can get this result by typing:")
cat("\n")
cat(paste("prop.test(c(",format(X2,scientific=FALSE),",",format(X1,scientific=FALSE),"), c(",format(n2,scientific=FALSE),",",format(n1,scientific=FALSE),"), alternative = '",sidedness,"', conf.level = ",format(conf_level,scientific=FALSE), ")",sep=""))
}
if(sidedness!="two.sided"){
cat("\n")
cat("\n")
cat("For the confidence interval, you would type:")
cat("\n")
cat(paste("prop.test(c(",format(X2,scientific=FALSE),",",format(X1,scientific=FALSE),"), c(",format(n2,scientific=FALSE),",",format(n1,scientific=FALSE),"), alternative = 'two.sided',", "conf.level = ",format(conf_level,scientific=FALSE), ")",sep=""))
}
}
if(compare=="single"){
n = as.numeric(readline("How many trials were there in your experiment? "))
while(n!=round(n) | n<1){cat('Please choose a whole number greater than zero')
n = as.numeric(readline("How many trials were there in your experiment? "))
}
X = as.numeric(readline("How many successes were there? "))
while(X!=round(X) | X<0 | X>n){cat(paste('Please choose a whole number greater than zero but less than ',toString(n),".",sep=""))
X = as.numeric(readline("How many successes were there? "))}
phat = X/n
s = sqrt(phat*(1-phat)/n)
cat("The statistics for your dataset are: ")
cat("\n")
cat(paste("phat =",format(phat,scientific=FALSE)))
cat("\n")
cat(paste("s = sqrt(",format(phat,scientific=FALSE),"*(1-",format(phat,scientific=FALSE),")/",format(n,scientific=FALSE),") = ",format(s,scientific=FALSE),sep=""))
p_0 = readline("What is the theoretical proportion you are testing against (called p_0)? ")
if(p_0!="NA"){p_0=as.numeric(p_0)}
conf_level = as.numeric(readline("What is your desired confidence level? "))
if(p_0!="NA"){
sidedness = readline("Are you doing a one-sided or two-sided test? Possible answers are 'less', 'greater', and 'two-sided'. ")
sidedness2=sidedness
if(sidedness=="two-sided"){
sidedness = "two.sided"
sidedness2 = "both"
}
out = binom.test(X,n,p=p_0,alternative=sidedness)}
if(p_0!="NA"){
out_conf = binom.test(X,n,p=p_0,alternative="two.sided")}
if(p_0=="NA"){out_conf = binom.test(X,n,p=0.5,alternative="two.sided")}
if(p_0!="NA"){
if(n>=100){
normal_p(X/n, p_0, s, sidedness2, print = FALSE)
}
if(n<100){
cols = rep("gray",n+1)
if(sidedness == "less"){
cols[1:(X+1)] = rep("skyblue",X+1)
}
if(sidedness == "greater"){
cols[(X+1):(n+1)] = rep("skyblue",n-X+1)
}
if(sidedness == "two.sided"){
if(X<=p_0*n){
Y = min(c(p_0*n+(p_0*n-X),n))
}
if(X>=p_0*n){
Y = X
X = max(c(p_0*n-(Y - p_0*n),0))
}
cols = rep("gray",n+1)
cols[1:(X+1)] = rep("skyblue",X+1)
cols[(Y+1):(n+1)] = rep("skyblue",n-Y+1)
}
barplot(dbinom(0:n,n,p_0),names = c(0:n),col=cols)
}
}
if(p_0!="NA"){
cat(paste("The probability of getting this result or more extreme for phat if the proportion really is ",format(p_0,scientific=FALSE)," is ",sep=""))
cat("\n")
cat(paste("p = ",format(out$p.value,scientific=FALSE)))
cat("\n")
cat("\n")}
cat(paste("The ",toString(conf_level*100),"% confidence interval for the population proportion is",sep=""))
cat("\n")
cat(paste(format(out_conf$conf.int[1],scientific=FALSE)," < p < ",format(out_conf$conf.int[2],scientific=FALSE)))
cat("\n")
cat("\n")
cat("\n")
cat("You can get this result by typing:")
cat("\n")
cat(paste("binom.test(x = ",format(X,scientific=FALSE),", n = ",format(n,scientific=FALSE),", p = ",format(p_0,scientific=FALSE),", alternative = '",sidedness,"', conf.level = ", format(conf_level,scientific=FALSE),")",sep=""))
if(p_0!="NA"){
if(sidedness!="two.sided"){
cat("\n")
cat("\n")
cat("For the confidence interval, you would type:")
cat("\n")
cat(paste("binom.test(x = ",format(X,scientific=FALSE),", n = ",format(n,scientific=FALSE),", p = ",format(p_0,scientific=FALSE),", alternative = 'two.sided', conf.level = ", format(conf_level,scientific=FALSE),")",sep=""))
}}
}
}
prop_test()
prop.test(c(15,20), c(90,100), alternative = 'two.sided',conf.level = 0.95)
stat.test()
#' Z-test
#'
#' This function asks you a sequence of questions in order to execute a z-test. It finds a confidence interval and a p-value, produces a plot, and indicates how this could be queried directly from R.
#' @export
#' @examples
#'
#' *******
#' Z-TESTS
#' *******
#'
#' > z_test()
#' What is the *population* standard deviation? 4
#' What is your sample mean? 8
#' What is the theoretical mean you are testing against (called mu_0)? 7.5
#' What is your sample size? 36
#' What is your desired confidence level? .90
#' Are you doing a one-sided or two-sided test? Possible answers are 'less', 'greater', and 'two-sided'. two-sided
#' The probability of getting this result or more extreme for xbar if mu really is 7.5 is
#' p =  0.4532547
#'
#' You can get this result by typing:
#'   2*(1-pnorm(8,7.5,4/sqrt(36))
#'
#'
#'      The 90% confidence interval for the population mean is
#'      6.903431  < mu <  9.096569
#'
#'      You can get this result by finding:
#'        zstar = 1-qnorm((1-0.9)/2,0,1) = 1.644854
#'
#'      and then calculating:
#'        8 - 1.644854 x 4/sqrt(36)  and  8 + 1.644854 x 4/sqrt(36)
#'
#'
#'
#'
#'
#'
#' > z_test()
#' What is the *population* standard deviation? 4
#' What is your sample mean? 8
#' What is the theoretical mean you are testing against (called mu_0)? 7.5
#' What is your sample size? 16
#' What is your desired confidence level? .99
#' Are you doing a one-sided or two-sided test? Possible answers are 'less', 'greater', and 'two-sided'. less
#' The probability of getting this result or more extreme for xbar if mu really is 7.5 is
#' p =  0.6914625
#'
#' You can get this result by typing:
#'   pnorm(8,7.5,4/sqrt(16))
#'
#'
#' The 99% confidence interval for the population mean is
#' 5.424171  < mu <  10.57583
#'
#' You can get this result by finding:
#'   zstar = 1-qnorm((1-0.99)/2,0,1) = 2.575829
#'
#' and then calculating:
#'   8 - 2.575829 x 4/sqrt(16)  and  8 + 2.575829 x 4/sqrt(16)
z_test <- function(){
sigma = as.numeric(readline("What is the *population* standard deviation? "))
xbar = as.numeric(readline("What is your sample mean? "))
mu_0 = readline("What is the theoretical mean you are testing against (called mu_0)? ")
if(mu_0!="NA"){mu_0 = as.numeric(mu_0)}
n = as.numeric(readline("What is your sample size? "))
conf_level = as.numeric(readline("What is your desired confidence level? "))
while(conf_level<0 | conf_level>1){cat('Please choose a confidence level between 0 and 1')
conf_level = as.numeric(readline("What is your desired confidence level? "))
}
if(mu_0!="NA"){
sidedness = readline("Are you doing a one-sided or two-sided test? Possible answers are 'less', 'greater', and 'two-sided'. ")
}
s = sigma/sqrt(n)
# new always the same confidence interval
zstar = -qnorm((1-conf_level)/2,0,1)
thing_to_type2 = paste("zstar = 1-qnorm((1-",format(conf_level,scientific=FALSE),")/2,0,1) = ",format(zstar,scientific=FALSE),sep="")
thing_to_type3 = paste(toString(xbar)," - ",format(zstar,scientific=FALSE)," x ",format(sigma,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
thing_to_type4 = paste(toString(xbar)," + ",format(zstar,scientific=FALSE)," x ",format(sigma,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
lower = xbar - zstar*s
upper = xbar + zstar*s
if(mu_0!="NA"){
z = (xbar-mu_0)/s
if(z<=0){
thing_to_type1 = paste("2*pnorm(",toString(xbar),",",toString(mu_0),",",toString(sigma),"/sqrt(",toString(n),"))",sep="")
}
if(z>0){
thing_to_type1 = paste("2*(1-pnorm(",toString(xbar),",",toString(mu_0),",",toString(sigma),"/sqrt(",toString(n),"))",sep="")
}
if(sidedness == "two-sided"){
out = normal_p(xbar, mu_0, s, "both", FALSE)
# zstar = -qnorm((1-conf_level)/2,0,1)
#
# thing_to_type2 = paste("zstar = 1-qnorm((1-",format(conf_level,scientific=FALSE),")/2,0,1) = ",format(zstar,scientific=FALSE),sep="")
# thing_to_type3 = paste(toString(xbar)," - ",format(zstar,scientific=FALSE)," x ",format(sigma,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
# thing_to_type4 = paste(toString(xbar)," + ",format(zstar,scientific=FALSE)," x ",format(sigma,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
#
# lower = xbar - zstar*s
# upper = xbar + zstar*s
z = (xbar-mu_0)/s
if(z<=0){
thing_to_type1 = paste("2*pnorm(",toString(xbar),",",toString(mu_0),",",toString(sigma),"/sqrt(",toString(n),"))",sep="")
}
if(z>0){
thing_to_type1 = paste("2*(1-pnorm(",toString(xbar),",",toString(mu_0),",",toString(sigma),"/sqrt(",toString(n),"))",sep="")
}
}
if(sidedness == "less"){
out = normal_p(xbar, mu_0, s, "less", FALSE)
# zstar = qnorm(conf_level,0,1)
#
# thing_to_type2 = paste("zstar = qnorm(",format(conf_level,scientific=FALSE),") = ",format(zstar,scientific=FALSE),sep="")
# thing_to_type3 = "-Infinity"
# thing_to_type4 = paste(toString(xbar)," + ",format(zstar,scientific=FALSE)," x ",format(sigma,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
#
# lower = -Inf
# upper = xbar + zstar*s
thing_to_type1 = paste("pnorm(",toString(xbar),",",toString(mu_0),",",toString(sigma),"/sqrt(",toString(n),"))",sep="")
}
if(sidedness == "greater"){
out = normal_p(xbar, mu_0, s, "greater", FALSE)
# zstar = qnorm(conf_level,0,1)
#
# thing_to_type2 = paste("zstar = qnorm(1-",format(conf_level,scientific=FALSE),") = ",format(zstar,scientific=FALSE),sep="")
# thing_to_type3 = paste(toString(xbar)," - ",format(zstar,scientific=FALSE)," x ",format(sigma,scientific=FALSE),"/sqrt(",toString(n),")",sep="")
# thing_to_type4 = "Infinity"
#
# lower = xbar - zstar*s
# upper = Inf
thing_to_type1 = paste("1-pnorm(",toString(xbar),",",toString(mu_0),",",toString(sigma),"/sqrt(",toString(n),"))",sep="")
}
cat(paste("The probability of getting this result or more extreme for xbar if mu really is ",toString(mu_0)," is",sep=""))
cat("\n")
cat(paste("p = ",format(out$prob,scientific=FALSE)))
cat("\n")
cat("\n")
cat("You can get this result by typing:")
cat("\n")
cat(thing_to_type1)
cat("\n")
cat("\n")
cat("\n")}
cat(paste("The ",toString(conf_level*100),"% confidence interval for the population mean is",sep=""))
cat("\n")
cat(paste(format(lower,scientific=FALSE)," < mu < ",format(upper,scientific=FALSE)))
cat("\n")
cat("\n")
cat("You can get this result by finding:")
cat("\n")
cat(thing_to_type2)
cat("\n")
cat("\n")
cat("and then calculating:")
cat("\n")
cat(paste(thing_to_type3," and ",thing_to_type4))
}
update_code()
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
cell_phone = c(11.9, 2.8, 3.0, 6.2, 4.7, 9.8, 11.1, 7.8)
stat.test()
stat.test()
data(facebook)
facebook = c(594,31,85,60,325,165,417,52,288,120,63,65,132,537,57,176,27,81,516,368,257,319,11,24,734,12,297,8,190,148)
usethis::use_data(facebook())
usethis::use_data(facebook
)
other_days = c(.27, .59, .32, .19, 1.26, .11, .3, .4, 1.59, .6, .65, .69, 1.26, .23, .38)
moon_days = c(3.33, 3.67, 2.67, 3.33, 3.33, 3.67, 4.67, 2.67, 6, 4.33, 3.33, .67, 1.33, .33, 2)
stat.test()
stat.test()
stat.test()
control = c(42,43,55,26,62,37,33,41,19,54,20,85,46,10,17,60,53,42,37,42,55,28,48)
treat = c(24,43,58,71,43,49,61,44,67,49,53,56,59,52,62,54,57,33,46,43,57)
stat.test()
stat.test()
stat.test()
teacher = seq(1,20)
teacher
Pretest = c(32,31,29,10,30,33,22,25,32,20,30,20,24,24,31,30,15,32,23,23)
pretest = c(32,31,29,10,30,33,22,25,32,20,30,20,24,24,31,30,15,32,23,23)
posttest = c(34,31,35,16,33,36,24,28,26,26,36,26,27,24,32,31,15,34,26,26)
gain = posttest-pretest
foreign_language = data.frame("teacher"=teacher,"pretest"=pretest,"posttest"=posttest,"gain"=gain)
usethis::use_data(foreign_language)
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
stat.test()
NEA = c(-94,-57,-29,135,143,151,245,355,392,473,486,535,571,580,620,690)
fat = c(4.2,3,3.7,2.7,3.2,3.6,2.4,1.3,3.8,1.7,1.6,2.2,1,0.4,2.3,1.1)
plot(NEA,fat)
cor(NEA,fat)
linreg()
find_residuals()
students$Handedness
table(students$Handedness,students$Athlete)
stat.test()
stat.test()

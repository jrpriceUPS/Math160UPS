cat("\n")
cat(paste("You can find the residuals by saving the model:"))
cat("\n")
cat(paste("model = lm(",varname2,"~",varname1,")",sep=""))
cat("\n")
cat("\n")
resid(regress)
plot(x,resid(regress),xlab=varname1,ylab="Residual")
cat(paste("and then typing:"))
cat("\n")
cat(paste("resid(model))"))
cat("\n")
cat("\n")
cat(paste("To plot them, type:\n"))
cat(paste("plot(",varname1,",resid(model))",sep=""))
resid(regress)
}
find_residuals()
find_residuals <- function(){
varname1 = readline("What is the name of the list with your x variable? ")
varname2 = readline("What is the name of the list with your y variable? ")
x = get(varname1)
y = get(varname2)
regress = lm(y ~ x)
intercept = as.numeric(coefficients(regress)[1])
slope = as.numeric(coefficients(regress)[2])
cat(paste("The best fit line for these data is:"))
cat("\n")
cat(paste(varname2," = ",toString(slope)," x (",varname1,") + ",toString(intercept),sep=""))
cat("\n")
cat("\n")
cat("\n")
cat(paste("You can find the residuals by saving the model:"))
cat("\n")
cat(paste("model = lm(",varname2,"~",varname1,")",sep=""))
cat("\n")
cat("\n")
resid(regress)
plot(x,resid(regress),xlab=varname1,ylab="Residual")
cat(paste("and then typing:"))
cat("\n")
cat(paste("resid(model))"))
cat("\n")
cat("\n")
cat(paste("To plot them, type:\n"))
cat(paste("plot(",varname1,",resid(model))",sep=""))
}
find_residuals()
install.packages("devtools")
library("devtools")
update.packages(checkBuilt = TRUE,ask = FALSE)
install.packages("devtools")
library("devtools")
install.packages("devtools")
install.packages("rlang")
install.packages("rlang")
install.packages("devtools")
library(devtools)
install_github("kalamadude/Math160UPS")
stat.test()
library(Math160UPS)
stat.test()
update_code <- function(){
library(devtools)
install_github("kalamadude/Math160UPS")
library(Math160UPS)
}
update_code()
?remove_NA
document()
?remove_NA
?remove_NA
update_code()
?remove_NA
?stat.test
library(Math160UPS)
?stat.test
install_github("kalamadude/Math160UPS")
update_code()
install_github("kalamadude/Math160UPS")
library(Math160UPS)
?z_test
?stat.test
library(Math160UPS)
?stat.test
update_code()
?normal_p
install_github("kalamadude/Math160UPS")
library(devtools)
install_github("kalamadude/Math160UPS")
install_github("kalamadude/Math160UPS")
?update_code
?stat.test
?mean
update_code()
library(devtools)
install_github("kalamadude/Math160UPS")
?stat.test
library(Math160UPS)
?stat.test
?update_code
update_code()
?update_code
update_code()
?update_code
load_all()
#' Update Code to Latest Version
#'
#' This function updates your library to the newest version and sets those to become available.
#' @export
#' @examples
#' > update_code()
update_code <- function(){
remove.packages("Math160UPS")
library(devtools)
install_github("kalamadude/Math160UPS")
library("Math160UPS")
}
update_code()
?update_code
?stat.test
grapeData <- read.csv(file.choose(), header=TRUE)
grapeData <- read.csv(file.choose(), header=TRUE)
View(grapeData)
head(grapeData)
rainData <- read.table(http://www.statsci.org/data/oz/sydrain.txt,header=TRUE)
rainData <- read.table("http://www.statsci.org/data/oz/sydrain.txt",header=TRUE)
head(rainData)
riverData <- read.table("http://www.statsci.org/data/oz/nzrivers.txt",header=TRUE)
head(riverData)
helmetData <- read.table("http://www.statsci.org/data/oz/nzhelmet.txt", header=TRUE)
head(helmetData)
helmetData <- transform(helmetData, Difference = Cardboard - Metal)head(helmetData)
helmetData <- transform(helmetData, Difference = Cardboard - Metal)
head(helmetData)
hist(helmetData$Difference, xlab= "Cardboard - Metal", main= " Histogram of Differences in Cardboard and Metal")
densityplot(helmetData$Difference, xlab= "Cardboard - Metal", main= "Density Plot of Differences in Cardboard and Metal", pch=16)
lattice::densityplot(helmetData$Difference, xlab= "Cardboard - Metal", main= "Density Plot of Differences in Cardboard and Metal", pch=16)
qqPlot(helmetData$Difference, ylab= "Cardboard - Metal", main= "Normal Quantile Plot of Differences", pch=16)
car::qqPlot(helmetData$Difference, ylab= "Cardboard - Metal", main= "Normal Quantile Plot of Differences", pch=16)
qqplot(helmetData$Difference, ylab= "Cardboard - Metal", main= "Normal Quantile Plot of Differences", pch=16)
qqnorm(helmetData$Difference, ylab= "Cardboard - Metal", main= "Normal Quantile Plot of Differences", pch=16)
summary(helmetData$Difference)
mean(helmetData$Difference)
sd(helmetData$Difference)
read.table("http://www.statsci.org/data/oz/nzrivers.txt",header=TRUE)
read.csv("http://stat.pugetsound.edu/hoard/datasets/choristers.csv")
source('~/.active-rstudio-document', echo=TRUE)
melt(helmetData)
reshape2::melt(helmetData)
helmetData <- read.table("http://www.statsci.org/data/oz/nzhelmet.txt", header=TRUE)
head(helmetData)
boxplot(helmetData$Cardboard,helmetData$Metal, main= "Boxplot of Differences", horizontal= TRUE)
boxplot(helmetData$Cardboard,helmetData$Metal, main= "Boxplot of Differences", horizontal= TRUE, names=c("Cardboard","Metal"))
source('~/Dropbox/Teaching/Math 260/R Code/rscript_example.R', echo=TRUE)
source('~/Dropbox/Teaching/Math 260/R Code/rscript_example.R', echo=TRUE)
lattice::densityplot(melted.helmetData$value, groups = "variable", xlab= "Measurement", main= "Density Plot of Measurements Using Cardboard and Metal", pch=16)
lattice::densityplot(~value, groups = variable, data = melted.helmetData, xlab= "Measurement", main= "Density Plot of Measurements Using Cardboard and Metal", pch=16)
lattice::densityplot(~value, groups = variable, data = melted.helmetData, xlab= "Measurement", main= "Density Plot of Measurements Using Cardboard and Metal", pch=16, auto.key=TRUE)
balanceData <- read.table("http://www.statsci.org/data/general/balaconc.txt", header=TRUE)
head(balanceData)
hist(subset(balanceData,Age == "Elderly")$FBSway, xlab= "Cardboard", main= " Histogram of Cardboard")
hist(subset(balanceData,Age == "Young")$FBSway, xlab= "Forward/Backward Sway", main= " Histogram of Sway for Young Subjects")
melted.balanceData <- reshape2::melt(balanceData)
head(melted.balanceData)
source('~/Dropbox/Teaching/Math 260/R Code/rscript_example.R', echo=TRUE)
boxplot(subset(balanceData,Age == "Elderly")$FBSway,subset(balanceData,Age == "Young")$FBSway, main= "Boxplot of Forward/Backward Sway", xlab = "Sway (mm)", horizontal= TRUE, names=c("Elderly","Young"))
source('~/Dropbox/Teaching/Math 260/R Code/rscript_example.R', echo=TRUE)
source('~/Dropbox/Teaching/Math 260/R Code/rscript_example.R', echo=TRUE)
source('~/Dropbox/Teaching/Math 260/R Code/rscript_example.R', echo=TRUE)
source('~/Dropbox/Teaching/Math 260/R Code/rscript_example.R', echo=TRUE)
forbes <- read.csv("http://stat.pugetsound.edu/hoard/datasets/forbes2010.csv")
head(forbes)
hist(forbes$sales)
qqnorm(forbes$sales)
hist(forbes$sales)
hist(forbes$sales, main = "Sales numbers of Forbes top 100 companies (2009)",xlab="Sales (billions of $ US)")
qqnorm(forbes$sales, main = " Normal Quantile-Quantile Plot of Forbes top 1000 sales (2009)")
qqnorm(forbes$sales, main = " Normal Quantile-Quantile Plot of Forbes top 1000 sales (2009)")
hist(forbes$sales, main = "Sales numbers of Forbes top 1000 companies (2009)",xlab="Sales (billions of $ US)")
log(exp(1))
popData <- read.csv("http://stat.pugetsound.edu/hoard/datasets/WAmunicipalities2007.csv")
popData <- transform(popData, logPop=log(population,base=10))
qqnorm(popData$population)
qqnorm(popData$logPop)
forbesData = forbes
qqnorm(forbesData)
qqnorm(forbesData$sales)
qqnorm(forbesData$sales,main="Forbes top 1000 company sales QQ plot")
median(forbesData$sales)
forbesData <- transform(forbesData, logSales = log(sales, base = 10))
qqnorm(forbesData$logSales)
lattice::densityplot(~sales,data=forbesData,groups=sector,auto.key=TRUE)
lattice::densityplot(~logSales,data=forbesData,groups=sector,auto.key=TRUE)
lattice::densityplot(~profits,data=forbesData,groups=sector,auto.key=TRUE)
lattice::densityplot(~profits,data=forbesData,auto.key=TRUE)
assets
lattice::densityplot(~assets,data=forbesData,auto.key=TRUE)
lattice::densityplot(~assets,data=forbesData,groups=sector,auto.key=TRUE)
forbesData <- transform(forbesData,logAsset = log(assets,base=10))
lattice::densityplot(~logAssets,data=forbesData,groups=sector,auto.key=TRUE)
lattice::densityplot(~logAsset,data=forbesData,groups=sector,auto.key=TRUE)
lattice::densityplot(~logAsset,data=forbesData,auto.key=TRUE)
qqnorm(forbesData$logAsset)
qqnorm(subset[forbesData,sector != "Financials]$logAsset)
)
]
$
asdlfkj
""
'asdflkjadsf'
qqnorm(subset(forbesData,sector != "Financials)$logAsset)
)
qqnorm(subset(forbesData,sector != "Financials")$logAsset)
lattice::densityplot(subset(forbesData,sector != "Financials")$logAsset)
lattice::densityplot(~logAsset,data = subset(forbesData,sector != "Financials"))
lattice::densityplot(~logAsset,data = subset(forbesData,sector != "Financials"),groups=sector)
read.csv("http://stat.pugetsound.edu/hoard/datasets/anthrokids.csv")
read.table(file.choose(), header=TRUE)
read.table(file.choose(), header=TRUE)
anthro <- read.csv(file.choose(), header=TRUE)
View(anthro)
lattice::densityplot(~stature,groups=Gender,data=anthro,auto.key=TRUE)
lattice::densityplot(~Stature,groups=Gender,data=anthro,auto.key=TRUE)
lattice::densityplot(~Weight,groups=Gender,data=anthro,auto.key=TRUE)
anthro$Age_in_Years/anthro$Age_in_Months
anthro$Age_in_Years-anthro$Age_in_Months*84
anthro$Age_in_Years/84-anthro$Age_in_Months
lattice::densityplot(~Upper_Arm_Circumference,data=anthro)
qqnorm(anthro$Upper_Arm_Circumference)
qqnorm(log(anthro$Upper_Arm_Circumference))
lattice::densityplot(log(anthro$Upper_Arm_Circumference))
mms <- read.csv("http://stat.pugetsound.edu/hoard/datasetDetails.aspx?id=1")
lattice::densityplot(~mass,data=mms)
head(mms)
mms <- read.csv("http://stat.pugetsound.edu/hoard/datasets/mms.csv")
head(mms)
lattice::densityplot(~mass,data=mms)
lattice::densityplot(~mass,data=mms,groups=type)
lattice::densityplot(~mass,data=mms,groups=type,auto.key=TRUE)
lattice::densityplot(~diameter,data=mms,groups=type,auto.key=TRUE)
lattice::densityplot(~mass,data=mms,groups=type,auto.key=TRUE)
mean(subset(mms,type==plain))
mean(subset(mms,type=="plain"))
mean(subset(mms,type=="plain"),na.rm==TRUE)
subset(mms,type=="plain")
mean(subset(mms,type=="plain")$mass)
nrow(subset(mms,type=="plain")$mass)
nrow(subset(mms,type=="plain"))
pt(-1.843, df = 39)
students = read.csv("http://mathcs.pugetsound.edu/~jrprice/wp-content/uploads/2019/01/student_data.csv");
new_students = droplevels(subset(students,Gender == "Male" | Gender == "Female"))
lattice::densityplot(~Height,data=new_students,groups=Gender)
lattice::densityplot(~Height,data=new_students,groups=Gender,auto.key=TRUE)
lattice::densityplot(~Height,data=new_students,auto.key=TRUE)
lattice::densityplot(~Height,data=new_students,groups=Gender,auto.key=TRUE)
lattice::densityplot(~mass,data=mms,groups=type,auto.key=TRUE)
mean(subset(mms,type=="butter")$mass)
subset(mms,type=="butter")
head(mms)
subset(mms,type=="peanut butter")
mean(subset(mms,type=="peanut butter")$mass)
t.test(subset(mms,type=="peanut butter")$mass,mu=2)
t.test(subset(mms,type=="peanut butter")$mass,mu=1.8)
t.test(subset(mms,type=="peanut butter")$mass,mu=1.9)
t.test(subset(mms,type=="peanut butter")$mass,mu=1.85)
pestrels <- read.csv("http://stat.pugetsound.edu/hoard/datasets/snowPetrels.csv")
head(pestrels)
subset(pestrels,day==0)
mean(subset(pestrels,day==0)$mass,rm.na=TRUE)
mean(subset(pestrels,day==0)$mass,na.rm =TRUE)
car::qqPlot(pestrels$mass)
car::qqPlot(pestrels$mass)
library(car)
head(mtcars)
10+10*9+10*9*8
10+10*9+10*9*8+10*9*8*7+10*9*8*7*6+10*9*8*7*6*5+10*9*8*7*6*5*4+10*9*8*7*6*5*4*3+10*9*8*7*6*5*4*3*2+10*9*8*7*6*5*4*3*2*1
carData <- mtcars
head(carData)
carData$am <- factor(carData$am)
summary(carData)
lattice::densityplot(~mpg,data=carData)
lattice::densityplot(~mpg,data=carData,xlab = "MPG")
lattice::densityplot(~cyl,data=carData,xlab = "Cylinders")
lattice::densityplot(~disp,data=carData,xlab = "Engine Displacement")
lattice::densityplot(~hp,data=carData,xlab = "Horsepower")
lattice::densityplot(~drat,data=carData,xlab = "Rear Axle Ratio")
lattice::densityplot(~wt,data=carData,xlab = "Weight (1000s of pounds")
lattice::densityplot(~qsec,data=carData,xlab = "Time to Quarter Mile (seconds)")
lattice::densityplot(~wt,data=carData,xlab = "Weight (1000s of pounds)")
lattice::densityplot(~vs,data=carData,xlab = "V / S")
am
head(carData)
lattice::densityplot(~gear,data=carData,xlab = "Number of Forward Gears")
lattice::densityplot(~carb,data=carData,xlab = "Number of Carburetors")
carData$cyl <- factor(carData$cyl)
carData$vs <- factor(carData$vs)
carData$gear <- factor(carData$gear)
car::splom(carData)
lattice::splom(carData)
lattice::splom(subset(carData,select = c(mpg,disp,hp,drat,wt,qsec,carb)))
read.csv(file.choose())
students <- read.csv(file.choose())
devtools::use_data(students)
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
devtools::use_data(students)
devtools::use_data(students,overwrite=TRUE)
library("Math160UPS")
data(students)
nrow(students)
update_code()
data(students)
nrow(students)
model1 <- lm(mpg~wt, data=carData)  # No vif because it is SLRmodel2 <- lm(mpg~wt+disp+hp, data=carData)
> vif(model2)
wt     disp       hp
4.844618 7.324517 2.736633
> model3 <- lm(mpg~wt+disp+carb, data=carData)
> vif(model3)
GVIF Df GVIF^(1/(2*Df))
wt   5.699862  1        2.387438
disp 5.188729  1        2.277878
carb 1.757593  5        1.058015
> model4 <- lm(mpg~wt+cyl+hp, data=carData)
> vif(model4)
wt      cyl       hp
2.580486 4.757456 3.258481
> model5 <- lm(mpg~wt+hp+am, data=carData)
> vif(model5)
model1 <- lm(mpg~wt, data=carData)
SLRmodel2 <- lm(mpg~wt+disp+hp, data=carData)
model1 <- lm(mpg~wt, data=carData)  # No vif because it is SLR
model1 <- lm(mpg~wt, data=carData)  # No vif because it is SLR
model2 <- lm(mpg~wt+disp+hp, data=carData)
vif(model2)
model1 <- lm(mpg~wt, data=carData)  # No vif because it is SLR
model2 <- lm(mpg~wt+disp+hp, data=carData)
car::vif(model2)
model3 <- lm(mpg~wt+disp+carb, data=carData)
car::vif(model3)
model4 <- lm(mpg~wt+cyl+hp, data=carData)
car::vif(model4)
model5 <- lm(mpg~wt+hp+am, data=carData)
vif(model5)
model1 <- lm(mpg~wt, data=carData)  # No vif because it is SLR
model2 <- lm(mpg~wt+disp+hp, data=carData)
car::vif(model2)
model3 <- lm(mpg~wt+disp+carb, data=carData)
car::vif(model3)
model4 <- lm(mpg~wt+cyl+hp, data=carData)
car::vif(model4)
model5 <- lm(mpg~wt+hp+am, data=carData)
car::vif(model5)
AIC(model1, model2, model3, model4, model5)
summary(model4)
car::qqPlot(rstandard(model4))
lattice::xyplot(rstandard(model4)~fitted(model4))
lattice::xyplot(rstandard(model4)~fitted(model4),pch=16)
lattice::xyplot(rstandard(model4)~fitted(model4),pch=16,col="black")
summary(model1)
head(students)
head(riverData)
subset(riverData,FlowsInto == "Pacific")
subset(riverData,FlowsInto == "Tasman")
subset(riverData,Length > 100)
rm("mms")
data(students)
head(students)
boxplot(students$Height)
boxplot(students$ShoeSz)
boxplot(students$Weight)
hist(students$ShoeSz)
hist(students$Height)
plot(students$YoungestParent,students$OldestParent)
table(students$Gender)
table(students$Coffee)
table(students$DietPref)
table(students$Salary)
hist(students$Salary)
students$Salary
max(students$Slaray)
max(students$Salary)
max(students$Salary,na.rm=TRUE)
boxplot(students$Salary)
x = 3
x
x == 4
x == 3
disp("Your code update was successful!")
print("Your code update was successful!")
update_code()
cat("**********************\n")
cat("* Your update was successful! *\n")
cat("**********************")
update_code()
cat("**********************\n")
#' Update Code to Latest Version
#'
#' This function updates your library to the newest version and sets those to become available.
#' @export
#' @examples
#' > update_code()
update_code <- function(){
library(devtools)
install_github("kalamadude/Math160UPS")
.rs.restartR()
library("Math160UPS")
cat("**********************\n")
cat("* Your update was successful! *\n")
cat("**********************")
}
update_code()
#' Update Code to Latest Version
#'
#' This function updates your library to the newest version and sets those to become available.
#' @export
#' @examples
#' > update_code()
update_code <- function(){
library(devtools)
install_github("kalamadude/Math160UPS")
.rs.restartR()
library("Math160UPS")
}
update_code()
install_github("kalamadude/Math160UPS")
install_github("jrpriceUPS/Math160UPS")
library(devtools)
install_github("jrpriceUPS/Math160UPS")
#' Update Code to Latest Version
#'
#' This function updates your library to the newest version and sets those to become available.
#' @export
#' @examples
#' > update_code()
update_code <- function(){
library(devtools)
install_github("jrpriceUPS/Math160UPS")
.rs.restartR()
library("Math160UPS")
cat("**********************\n")
cat("* Your update was successful! *\n")
cat("**********************")
}
update_code()
#' Update Code to Latest Version
#'
#' This function updates your library to the newest version and sets those to become available.
#' @export
#' @examples
#' > update_code()
update_code <- function(){
library(devtools)
install_github("jrpriceUPS/Math160UPS")
.rs.restartR()
library("Math160UPS")
cat("\n\n\n\n\n")
cat("*******************************\n")
cat("* Your update was successful! *\n")
cat("*******************************")
}
update_code()
update_code()
library(sleuth3)
install.packages(sleuth3)
install.packages("sleuth3")
install.packages("Sleuth3")
library(Sleuth3)
case1201
?case1201
head(satData)
satData <- case1201
head(satData)
densityplot(~SAT, data=satData)
lattice::densityplot(~SAT, data=satData)
lattice::densityplot(~Takers, data=satData)
lattice::densityplot(~Income, data=satData)
lattice::densityplot(~Years, data=satData)
lattice::densityplot(~Public, data=satData)
lattice::densityplot(~Expend, data=satData)
lattice::densityplot(~Rank, data=satData)
car::splom(satData)
lattice::splom(satData)
head(satData)
lattice::splom(subset(satData,select = c("SAT","Takers","Income","Years","Public","Expend","Rank"))
)
model1 <- lm(SAT~Expend, data = satData)
model1 <- lm(SAT~Takers + Income + Years + Public + Expend + Rank, data = satData)
model1 <- lm(SAT~Expend, data = satData)
model2 <- lm(SAT~Takers + Income + Years + Public + Expend + Rank, data = satData)
model1 <- lm(SAT~Expend, data = satData)
model2 <- lm(SAT~Takers + Income + Years + Public + Expend + Rank, data = satData)
model3 <- lm(SAT~Expend + Takers + Rank, data = satData)
model4 <- lm(SAT~Expend + Income, data = satData)
model5 <- lm(SAT~Expend + Public, data = satData)
AIC(model1, model2, model3, model4, model5)
car::qqPlot(~Takers, data = satData)
satData <- transform(satData, logT = log(Takers, base = 10))
car::qqPlot(~logT, data = satData)
model6 = lm(SAT~Income + Expend + Takers, data = satData)
model7 = lm(SAT~Income + Expend + logT, data = satData)
AIC(model1, model2, model3, model4, model5, model6, model7)
car::vif(model7)
car::vif(model2)
summary(model7)
summary(model7)
car::qqPlot(rstandard(model7))
car::xyplot(rstandard(model7)~fitted(model7))
lattice::xyplot(rstandard(model7)~fitted(model7))
library()
devtools::build()
?barplot

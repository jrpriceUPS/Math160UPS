pi ~ beta(3, 8);
}
"
bb_sim <- stan(model_code = bb_model, data = list(Y = 2),
chains = 3, iter = 12000, seed = 84735)
mcmc_trace(bb_sim, pars = "pi", size = 0.1)
# Density plot of the Markov chain values
mcmc_dens_overlay(bb_sim, pars = "pi") +
yaxis_text(TRUE)
mcmc_acf(bb_sim)
mcmc_acf(bb_sim, pars = "pi")
bb_sim <- stan(model_code = bb_model, data = list(Y = 2),
chains = 4, iter = 2*10000, seed = 84735)
mcmc_trace(bb_sim, pars = "pi", size = 0.1)
# Density overlay plot of the Markov chain values
mcmc_dens_overlay(bb_sim, pars = "pi") +
yaxis_text(TRUE)
mcmc_acf(bb_sim, pars = "pi")
mcmc_neff(bb_sim, pars = "pi")
mcmc_neff(bb_sim)
neff_ratio(bb_sim, pars = c("pi"))*10000
rhat(bb_sim, pars = "pi")
# STEP 1: DEFINE the model
nn_model <- "
data {
real Y[4];
}
parameters {
real pi;
}
model {
Y ~ normal(pi, 1.3);
pi ~ normal(10, 1.2);
}
"
nn_sim <- stan(model_code = nn_model, data = list(Y = c(7.1,8.9,8.4,8.6)),
chains = 4, iter = 10000, seed = 84735)
mcmc_trace(nn_sim, pars = "pi", size = 0.1)
# Density overlay plot of the Markov chain values
mcmc_dens_overlay(nn_sim, pars = "pi") +
yaxis_text(TRUE)
mcmc_acf(nn_sim, pars = "pi")
neff_ratio(nn_sim, pars = c("pi"))*10000
rhat(nn_sim, pars = "pi")
source("~/Dropbox/Teaching/Math 360/demos/islandMCMC.R", echo=TRUE)
set.seed(84735)
rnorm(1,4.6,2)
rnorm(1,2.1,7)
runif(1,8.9-2,8.9+2)
runif(1,1.2-.5,1.2+.5)
runif(1,7.7-3,7.7+3)
Current = 2^-2
Proposed = 2.1^-2
Proposed / Current
Current = exp(2)
Proposed = exp(2.1)
Proposed / Current
Current = exp(-10*2)
Proposed = exp(-10*2.1)
Proposed / Current
Current = exp(-2^4)
Proposed = exp(-2.1^4)
Proposed / Current
one_mh_iteration <- function(w, current){
# STEP 1: Propose the next chain location
proposal <- runif(1, min = current - w, max = current + w)
# STEP 2: Decide whether or not to go there
proposal_plaus <- dnorm(proposal, 0, 1) * dnorm(6.25, proposal, 0.75)
current_plaus  <- dnorm(current, 0, 1) * dnorm(6.25, current, 0.75)
alpha <- min(1, proposal_plaus / current_plaus)
next_stop <- sample(c(proposal, current),
size = 1, prob = c(alpha, 1-alpha))
# Return the results
return(data.frame(proposal, alpha, next_stop))
}
mh_tour <- function(N, w){
# 1. Start the chain at location 3
current <- 3
# 2. Initialize the simulation
mu <- rep(0, N)
# 3. Simulate N Markov chain stops
for(i in 1:N){
# Simulate one iteration
sim <- one_mh_iteration(w = w, current = current)
# Record next location
mu[i] <- sim$next_stop
# Reset the current location
current <- sim$next_stop
}
# 4. Return the chain locations
return(data.frame(iteration = c(1:N), mu))
}
#part a
mh_tour(1000,0.01)
plot(smallW,"l")
#part a
smallW = mh_tour(1000,0.01)
plot(smallW,"l")
plot(seq(1,1000),smallW,"l")
plot(seq(1,1001),smallW,"l")
length(smallW)
plot(smallW$iteration,smallW$mu,"l")
# part c
largeW = mh_tour(1000,100)
plot(largeW$iteration,largeW$mu,"l")
# part e
goodW = mh_tour(1000,1)
plot(goodW$iteration,goodW$mu,"l")
?rnorm
one_mh_iteration_normal <- function(s, current){
# STEP 1: Propose the next chain location
proposal <- rnorm(1, mu = current, sd = s)
# STEP 2: Decide whether or not to go there
proposal_plaus <- dnorm(proposal, 0, 1) * dnorm(6.25, proposal, 0.75)
current_plaus  <- dnorm(current, 0, 1) * dnorm(6.25, current, 0.75)
alpha <- min(1, proposal_plaus / current_plaus)
next_stop <- sample(c(proposal, current),
size = 1, prob = c(alpha, 1-alpha))
# Return the results
return(data.frame(proposal, alpha, next_stop))
}
set.seed(1)
one_mh_iteration_normal(s = 0.01, current = 3)
one_mh_iteration_normal(s = 0.5, current = 3)
one_mh_iteration_normal(s = 1, current = 3)
one_mh_iteration_normal(s = 3, current = 3)
# STEP 1: Propose the next chain location
proposal <- rnorm(1, mean = current, sd = s)
one_mh_iteration_normal <- function(s, current){
# STEP 1: Propose the next chain location
proposal <- rnorm(1, mean = current, sd = s)
# STEP 2: Decide whether or not to go there
proposal_plaus <- dnorm(proposal, 0, 1) * dnorm(6.25, proposal, 0.75)
current_plaus  <- dnorm(current, 0, 1) * dnorm(6.25, current, 0.75)
alpha <- min(1, proposal_plaus / current_plaus)
next_stop <- sample(c(proposal, current),
size = 1, prob = c(alpha, 1-alpha))
# Return the results
return(data.frame(proposal, alpha, next_stop))
}
set.seed(1)
one_mh_iteration_normal(s = 0.01, current = 3)
one_mh_iteration_normal(s = 0.5, current = 3)
one_mh_iteration_normal(s = 1, current = 3)
one_mh_iteration_normal(s = 3, current = 3)
mh_tour <- function(N, s){
# 1. Start the chain at location 3
current <- 3
# 2. Initialize the simulation
mu <- rep(0, N)
# 3. Simulate N Markov chain stops
for(i in 1:N){
# Simulate one iteration
sim <- one_mh_iteration_normal(s = s, current = current)
# Record next location
mu[i] <- sim$next_stop
# Reset the current location
current <- sim$next_stop
}
# 4. Return the chain locations
return(data.frame(iteration = c(1:N), mu))
}
parta = mh_tour(20,0.01)
partb = mh_tour(20,10)
partc = mh_tour(1000,0.01)
partd = mh_tour(1000,10)
plot(parta$iteration,parta$mu,"l")
plot(partb$iteration,partb$mu,"l")
plot(partc$iteration,partc$mu,"l")
plot(partd$iteration,partd$mu,"l")
# part f
partf = mh_tour(1000,1)
plot(partf$iteration,partf$mu,"l")
# Exercise 8.6
c(qbeta(.025,4,5),qbeta(.975,4,5)
# Exercise 8.6
c(qbeta(.025,4,5),qbeta(.975,4,5))
# Exercise 8.6
c(qbeta(.025,4,5),qbeta(.975,4,5))
c(qbeta(.2,4,5),qbeta(.8,4,5))
c(qgamma(.025,1,8),qgamma(.975,1,8))
source("~/Dropbox/Teaching/Math 360/demos/posteriorEstimation.R", echo=TRUE)
goodW
quantile(goodW$mu)
quantile(goodW$mu,c(.025,.075))
quantile(goodW$mu,c(.025,.975))
hist(goodW$mu)
betaFixedMu = function(mu,alphaList){
xGrid = seq(0,1,length = 1000)
for (alpha in alphaList) {
lines(xGrid,dbeta(xGrid,alpha,alpha/mu-alpha))
}
}
betaFixedMu(0.014,seq(1,100))
betaFixedMu = function(mu,alphaList){
xGrid = seq(0,1,length = 1000)
plot(xGrid,dbeta(xGrid,alphaList[1],alphaList[1]/mu-alphaList[1]))
for (alpha in alphaList) {
lines(xGrid,dbeta(xGrid,alpha,alpha/mu-alpha))
}
}
betaFixedMu(0.014,seq(1,100))
betaFixedMu(0.014,seq(1,10))
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
betaFixedMu(0.6,seq(1,10))
betaFixedMu(0.6,seq(2,10))
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
betaFixedMu(0.265,seq(2,10))
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
97500000 / 195000000
mu = 0.014
alpha = 2
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = 1
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .1
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .09
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .08
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .087
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .085
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .083
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .082
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .0825
pbeta(1/40000,alpha,alpha / mu - alpha)
plot(xGrid,dbeta(xGrid, alpha, alpha / mu - alpha))
seq(0,1,length = 1000)
mu = 0.014
alpha = .0825
beta = alpha / mu - alpha
pbeta(1/40000,alpha,beta)
plot(xGrid,dbeta(xGrid, alpha, alpha / mu - alpha))
xGrid = seq(0,1,length = 1000)
mu = 0.014
alpha = .0825
beta = alpha / mu - alpha
pbeta(1/40000,alpha,beta)
plot(xGrid,dbeta(xGrid, alpha, alpha / mu - alpha))
plot(xGrid,dbeta(xGrid, alpha, alpha / mu - alpha),"l")
beta
1 - pbeta(0.4, 4, 3)
0.8208 / (1 - 0.8208)
1 - pbeta(0.4, 1, 0.8)
0.6645 / (1 - 0.6645)
4.58 / 1.98
library(bayesrules)
library(tidyverse)
# inspect data to find binomial data
data("pulse_of_the_nation")
head(pulse_of_the_nation)
pulse_of_the_nation %>%
tabyl(climate_change)
pulse_of_the_nation %>%
tabyl(climate_change) %>%
adorn_totals(c("col","row"))
# STEP 1: DEFINE the model
bb_model <- "
data {
int<lower = 0, upper = 1000> Y;
}
parameters {
real<lower = 0, upper = 1> pi;
}
model {
Y ~ binomial(1000, pi);
pi ~ beta(1, 2);
}
"
bb_sim <- stan(model_code = bb_model, data = list(Y = 150),
chains = 4, iter = 10000, seed = 84735)
mcmc_trace(bb_sim, pars = "pi", size = 0.1)
# Density overlay plot of the Markov chain values
mcmc_dens_overlay(bb_sim, pars = "pi") +
yaxis_text(TRUE)
mcmc_acf(bb_sim, pars = "pi")
neff_ratio(bb_sim, pars = c("pi"))
rhat(bb_sim, pars = "pi")
bb_sim
neff_ratio(bb_sim, pars = c("pi")) * 20000
# 8.17: estimation and hyp. testing
tidy(bb_sim)
library(rstan)
library(broom.mixed)
# 8.17: estimation and hyp. testing
tidy(bb_sim)
install.packages("broom.mixed")
library(bayesrules)
library(tidyverse)
library(rstan)
library(bayesplot)
library(broom.mixed)
library(janitor)
# 8.17: estimation and hyp. testing
tidy(bb_sim)
# 8.17: estimation and hyp. testing
tidy(bb_sim,conf.int = TRUE, conf.level = 0.95)
# .129 to .173
mcmc_dens(bb_sim)
# .129 to .173
mcmc_dens(bb_sim, pars = "pi")
mcmcDf = as.data.frame(bb_sim, pars = "lp__", include = FALSE)
head(mcmcDf)
# .129 to .173
quantile(mcmcDf$pi, c(.025,.975))
# part b
mcmcDf %>%
mutate(aboveH0 = pi > 0.1) %>%
tabyl(aboveH0)
# part b
mcmcDf %>%
mutate(aboveH0 = pi > 0.14) %>%
tabyl(aboveH0)
# part b
mcmcDf %>%
mutate(aboveH0 = pi > 0.1) %>%
tabyl(aboveH0)
# 8.18: Prediction
mcmcDf %>%
mutate(newSample = rbinom(1, size = 100,pi))
# 8.18: Prediction
mcmcDf = mcmcDf %>%
mutate(y_predict = rbinom(length(pi), size = 100, prob = pi))
ggplot(bb_chains_df, aes(x = y_predict)) +
stat_count()
ggplot(mcmcdf, aes(x = y_predict)) +
stat_count()
ggplot(mcmcDf, aes(x = y_predict)) +
stat_count()
mcmcDf %>%
mutate(moreThan20 = y_predict > 20) %>%
tabyl(moreThan20)
# establish the prior
students = data.frame(location = c("rural","urban"))
prior = c(.085,.915)
students
students_sim = sample_n(students, # grab a sample of rural and urban students
size = 100000, # 100,000 students in the sample
weight = prior, # 8.5% of the time pick "rural", 91.5% of the time pick urban
replace = TRUE)
head(students_sim)
nrow(students_sim)
# check that the proportions are right
students_sim %>%
tabyl(location) %>%
adorn_totals("row")
# add another column to the simulation that indicates the chance a student is LGBT
students_sim = students_sim %>%
mutate(chanceLGBT = case_when(location == "rural" ~ 0.1,
location == "urban" ~ 0.105))
head(students_sim)
data = c("LGBT", "Not LGBT")
data = c("LGBT", "Not LGBT")
students_sim = students_sim %>%
group_by(1:n()) %>%
mutate(sexuality = sample(data, size = 1,
prob = c(chanceLGBT,1-chanceLGBT)))
head(students_sim)
# look at a new table
students_sim %>%
tabyl(location,sexuality) %>%
adorn_totals(c("col","row"))
# make a bar plot
ggplot(students_sim,aes(x = location, fill = sexuality)) +
geom_bar(position = "fill")
# pull out *only* the LGBT students and ask what % of them were urban vs rural
# that's the posterior!
students_sim %>%
filter(sexuality == "LGBT") %>%
tabyl(location) %>%
adorn_totals("row")
rm(list = ls())
graphics.off()
data(iris)
head(iris)
?iris
grapes = read.csv(file.choose())
head(grapes)
grapes2 = read.csv("/Users/jrprice/Desktop/grapes.csv")
head(grapes2)
grapes3 = read.csv(file.choose())
head(grapes3)
rivers = read_table("http://www.statsci.org/data/oz/nzrivers.txt")
head(rivers)
rivers = read.table("http://www.statsci.org/data/oz/nzrivers.txt")
head(rivers)
rivers = read.table("http://www.statsci.org/data/oz/nzrivers.txt",header = TRUE)
head(rivers)
iris$Sepal.Length
attach(iris)
Sepal.Width
?tapply
Sepal.Length
Species
tapply(Sepal.Length, Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
myMeans = tapply(iris$Sepal.Length, iris$Species, mean)
myMeans
mySDs = tapply(iris$Sepal.Length, iris$Species, sd)
mySDs
myN = tapply(iris$Sepal.Length,iris$Species, length)
myN
cbind(myN, myMeans, mySDs)
round(cbind(myN, myMeans, mySDs),2)
meanPetal = tapply(iris$Petal.Length,iris$Species, mean)
sdPetal = tapply(iris$Petal.Length,iris$Species, sd)
nPetal = tapply(iris$Petal.Length,iris$Species, length)
round(cbind(nPetal, meanPetal, sdPetal),2)
petalTable = round(cbind(nPetal, meanPetal, sdPetal),2)
colnames(petalTable) = c("Observations","Mean","St. Dev.")
petalTable
¬rm(list = ls())
rm(list = ls())
graphics.off()
24+24+25+25+11+11+11+22+22
175*2
175*2/40
175*2/80
rm(list = ls())
library(Math160UPS
)
partA
matrix1 = matrix(c(63,2037,16,784),nrow = 2)
colnames(matrix1) = c("Hospital A","Hospital B")
rownames(matrix1) = c("Died","Survived")
partA = as.table(matrix1)
partA
partA = data.frame(hospital = c(rep("Hospital A",63+2037),rep("Hospital B",16+784)), survival = c(rep("Died",63),rep("Survived",2037),rep("Died",16),rep("Survived",784)))
table(partA$hospital,partA$survival)
table(partA$survival,partA$hospital)
hospitalProblem
partA,partBGood,partBBad = hospitalProblem()
hospitalProblem()
ans = hospitalProblem()
matrix2 = matrix(c(6,594,8,592),nrow = 2)
colnames(matrix2) = c("Hospital A","Hospital B")
rownames(matrix2) = c("Died","Survived")
partBGood = as.table(matrix2)
partBGood
matrix3 = matrix(c(57,1443,8,192),nrow = 2)
colnames(matrix3) = c("Hospital A","Hospital B")
rownames(matrix3) = c("Died","Survived")
partBBad = as.table(matrix3)
partBBad
hospitals = data.frame(condition = c(rep("Good",6+8+594+592),rep("Bad",57+8+1443+192)))
hospitals = data.frame(condition = c(rep("Good",6+8+594+592),rep("Bad",57+8+1443+192)),
hospital = c(rep("Hospital A",6+594),rep("Hospital B",8+592),rep("Hospital A",57+1443),rep("Hospital B",8+192))
)
hospital = c(rep("Hospital A",6+594),rep("Hospital B",8+592),rep("Hospital A",57+1443),rep("Hospital B",8+192)))
hospital = c(rep("Hospital A",6+594),rep("Hospital B",8+592),rep("Hospital A",57+1443),rep("Hospital B",8+192))
head(hospital)
head(hospitals)
hospitals = data.frame(condition = c(rep("Good",6+8+594+592),rep("Bad",57+8+1443+192)),
hospital = c(rep("Hospital A",6+594),rep("Hospital B",8+592),rep("Hospital A",57+1443),rep("Hospital B",8+192)))
head(hospitals)
hospitals = data.frame(condition = c(rep("Good",6+8+594+592),rep("Bad",57+8+1443+192)),
+ hospital = c(rep("Hospital A",6+594),rep("Hospital B",8+592),rep("Hospital A",57+1443),rep("Hospital B",8+192)),
hospitals = data.frame(condition = c(rep("Good",6+8+594+592),rep("Bad",57+8+1443+192)),
hospital = c(rep("Hospital A",6+594),rep("Hospital B",8+592),rep("Hospital A",57+1443),rep("Hospital B",8+192))
,
survival = c(rep("Died",6),rep("Survived",594),rep("Died",8),rep("Survived",592),rep("Died",57),rep("Survived",1443),rep("Died",8),rep("Survived",192))
)
head(hospitals)
table(hospitals$hospital,hospitals$survival)
partBGood
good = subset(hospitals, condition == "Good")
table(good$survival,good$hospital)
bad = subset(hospitals,condition == "Bad")
table(bad$survival,bad$hospital)
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
library(devtools)
usethis::use_data(hospitals)
devtools::document()
rm(list = ls())
hospitals
setwd("~/Dropbox/Teaching")
hospitals
library(Math160UPS)
detach("package:Math160UPS", unload = TRUE)
hospitals
library("Math160UPS")
hospitals
data(hospitals)
update_code()
library("Math160UPS")
hospitals
data(modern_polar_T)
head(modern_polar_T)
data("modern_T_backup")
head(modern_T_backup)
modern_T_global = modern_T_backup
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
usethis::use_data(modern_T_global)
devtools::document()
rm(list = ls())
update_code()
modern_T_global
detach("package:Math160UPS", unload = TRUE)
modern_T_global
library("Math160UPS")
modern_T_global
plot(modern_T_global$year,modern_T_global$T_anomaly)

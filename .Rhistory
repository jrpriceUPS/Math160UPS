resid(model)
?resid
x = students$YoungestParent
y = students$OldestParent
lm(y ~ x)
model = lm(y ~ x)
regress = model
resid(regress,na.action=na.exclude)
resid(regress)
plot(x,resid(regress))
x
y
regress
#' Find Residuals
#'
#' This function allows you to find and plot the residuals from a linear fit of two datasets.
#' @export
#' @examples
#' > x = c(1,2,3,4,5,6,7)
#' > y = c(2.5,5.1,6.4,8.4,10.8,13.4,15.3)
#' > find_residuals()
#' What is the name of the list with your x variable? x
#' What is the name of the list with your y variable? y
#' The best fit line for these data is:
#'   y = 2.12142857142857 x (x) + 0.357142857142856
#'
#'
#' You can find the residuals by saving the model:
#'   model = lm(y~x)
#'
#' and then typing:
#'   resid(model))
#'
#' To plot them, type:
#'   plot(x,resid(model))
find_residuals <- function(){
cat("What is the name of the list with your x variable? \n")
varname1 = readline()
cat("What is the name of the list with your y variable? \n")
varname2 = readline()
if(grepl("$", varname1, fixed=TRUE)){
names = strsplit(varname1,"\\$")
frame = get(names[[1]])
x = frame[[names[[1]][2]]]
} else{
x = get(varname1)}
if(grepl("$", varname2, fixed=TRUE)){
names = strsplit(varname2,"\\$")
frame = get(names[[1]])
y = frame[[names[[1]][2]]]
} else{
y = get(varname2)}
xnew = x[!is.na(x)&!is.na(y)]
ynew = y[!is.na(x)&!is.na(y)]
x = xnew
y = ynew
regress = lm(y ~ x)
intercept = as.numeric(coefficients(regress)[1])
slope = as.numeric(coefficients(regress)[2])
cat(paste("The best fit line for these data is:"))
cat("\n")
cat(paste(varname2," = ",toString(slope)," x (",varname1,") + ",toString(intercept),sep=""))
cat("\n")
cat("\n")
cat("\n")
cat(paste("You can find the residuals by saving the model:"))
cat("\n")
cat(paste("model = lm(",varname2,"~",varname1,")",sep=""))
cat("\n")
cat("\n")
cat(paste("and then typing:"))
cat("\n")
cat(paste("resid(model)"))
print(resid(regress))
cat("\n")
cat("\n")
cat(paste("To plot them, you first need to remove all NAs from ",varname1," and ",varname2," (beyond the scope of this course), then type:\n"))
cat(paste("plot(",varname1,",resid(model))",sep=""))
plot(x,resid(regress),xlab=varname1,ylab="Residual")
}
find_residuals()
#' Find Residuals
#'
#' This function allows you to find and plot the residuals from a linear fit of two datasets.
#' @export
#' @examples
#' > x = c(1,2,3,4,5,6,7)
#' > y = c(2.5,5.1,6.4,8.4,10.8,13.4,15.3)
#' > find_residuals()
#' What is the name of the list with your x variable? x
#' What is the name of the list with your y variable? y
#' The best fit line for these data is:
#'   y = 2.12142857142857 x (x) + 0.357142857142856
#'
#'
#' You can find the residuals by saving the model:
#'   model = lm(y~x)
#'
#' and then typing:
#'   resid(model))
#'
#' To plot them, type:
#'   plot(x,resid(model))
find_residuals <- function(){
cat("What is the name of the list with your x variable? \n")
varname1 = readline()
cat("What is the name of the list with your y variable? \n")
varname2 = readline()
if(grepl("$", varname1, fixed=TRUE)){
names = strsplit(varname1,"\\$")
frame = get(names[[1]])
x = frame[[names[[1]][2]]]
} else{
x = get(varname1)}
if(grepl("$", varname2, fixed=TRUE)){
names = strsplit(varname2,"\\$")
frame = get(names[[1]])
y = frame[[names[[1]][2]]]
} else{
y = get(varname2)}
xnew = x[!is.na(x)&!is.na(y)]
ynew = y[!is.na(x)&!is.na(y)]
x = xnew
y = ynew
regress = lm(y ~ x)
intercept = as.numeric(coefficients(regress)[1])
slope = as.numeric(coefficients(regress)[2])
cat(paste("The best fit line for these data is:"))
cat("\n")
cat(paste(varname2," = ",toString(slope)," x (",varname1,") + ",toString(intercept),sep=""))
cat("\n")
cat("\n")
cat("\n")
cat(paste("You can find the residuals by saving the model:"))
cat("\n")
cat(paste("model = lm(",varname2,"~",varname1,")",sep=""))
cat("\n")
cat("\n")
cat(paste("and then typing:"))
cat("\n")
cat(paste("resid(model)"))
print(resid(regress))
cat("\n")
cat("\n")
cat(paste("To plot them, you first need to remove all NAs from",varname1,"and",varname2,"\n(beyond the scope of this course), then type:\n"))
cat(paste("plot(",varname1,",resid(model))",sep=""))
plot(x,resid(regress),xlab=varname1,ylab="Residual")
}
find_residuals()
41+.59*85
98.6 - (41+.59*85)
41+.59*95.5
98.6 - (41+.59*95.5)
94 - (41+.59*95.5)
plot(students$SATM,students$SATR)
plot(students$SATM,students$SATR, xlab = "SAT Math Score", ylab = "SAT Reading Score")
cor(students$SATM,students$SATR)
?cor
cor(students$SATM,students$SATR,na.rm = TRUE)
cor(students$SATM,students$SATR, use = "complete.obs")
update_code()
rm(list = ls())
library(Math160UPS)
data(students)
cor(students$ShoeSz,students$Height,use = "complete.obs")
plot(x,resid(regress),xlab=varname1,ylab="Residual")
source('~/Dropbox/Teaching/Math 160/Math160UPS/R/find_residuals.R', echo=TRUE)
find_residuals()
abline(0)
abline(0,0)
update_code()
update_code()
update_code()
update_code()
View(find_residuals)
rm("find_residuals")
find_residuals()
abline(0,0)
NEA = c(-94,-57,-29,135,143,151,245,355,392,473,486,535,571,580,620,690)
fat = c(4.2,3,3.7,2.7,3.2,3.6,2.4,1.3,3.8,1.7,1.6,2.2,1,0.4,2.3,1.1)
linreg()
find_residuals()
abline(0,0)
plot(students$ShoeSz,students$Height)
cor(students$ShoeSz,students$Height, use = "complete.obs")
linreg()
1.83039754216219 * 9 + 50.6239384375693
find_residuals()
plot(students$YoungestParent,students$OldestParent)
cor(students$YoungestParent,students$OldestParent, use = "complete.obs")
linreg()
0.804402164680758*52 + 13.5766495983692
find_residuals()
data(SAT)
cor(SAT$Spending,SAT$Score,use = "complete.obs")
linreg()
lattice::xyplot(Score ~ Spending,data = SAT)
lattice::xyplot(Score ~ Spending,data = SAT, type = c(pl","r"))
lattice::xyplot(Score ~ Spending,data = SAT, type = c("p","r"))
head(SAT)
data(SATclass)
head(SATclass)
lattice::xyplot(Score ~ Spending, groups = Level, data = SATclass, type = c("p","r"))
lattice::xyplot(Score ~ Spending, groups = Level, data = SATclass, type = c("p","r"), legend = TRUE)
lattice::xyplot(Score ~ Spending, groups = Level, data = SATclass, type = c("p","r"), auto.key = TRUE)
plot(students$HSGPA,students$UPSGPA)
plot(students$HSGPA,students$UPSGPA, xlab = "High School GPA",ylab = "UPS GPA")
cor(students$HSGPA,students$UPSGPA,use = "complete.obs")
linreg()
0.68135984112255*3.72 + 0.811311142942809
find_residuals()
sqrt(.6466)
flies = read.csv(file.choose())
head(flies)
lattice::densityplot(~Longevity, groups = CompanionNumber, data = flies, auto.key = TRUE)
anovaModel = lm(Longevity~CompanionNumber, data = flies)
summary(anovaModel)
TukeyHSD(aov(anovaModel))
lattice::xyplot(Longevity~Thorax, groups = CompanionNumber, auto.key = TRUE, data = flies)
lattice::xyplot(Longevity~Thorax, groups = CompanionNumber, auto.key = TRUE, data = flies, type = c("r","p"))
ancovaModel = lm(Longevity ~ CompanionNumber*Thorax, data = flies)
summary(ancovaModel)
ancovaModel = lm(Longevity ~ CompanionNumber + Thorax, data = flies)
summary(ancovaModel)
evals = read.csv(file.choose())
head(evals)
evals = read.csv("/Users/jake/Dropbox/Teaching/Student Evaluations/UPS/TenureStudentEvals.csv")
head(evals)
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
head(subEvals)
evals
evals$Course
str(evals$Course)
asString(evals$Course)
toString(evals$Course)
evals2 = transform(evals, CourseTitle=paste(toString(Course), Section, sep=""))
head(evals2)
evals2 = transform(evals, CourseTitle=paste(Course, Section, sep=""))
head(evals2)
table(evals2$CourseTitle)
evals = transform(evals, CourseTitle=paste(Course, Section, sep=""), FullSem = paste(Semester,Year,sep = ""))
head(evals)
subEvals = subset(evals, FullSem == whichOnes)
whichOnes = c("Fall2019","Spring2020")
subEvals = subset(evals, FullSem == whichOnes)
head(subEvals)
table(subEvals$FullSem)
table(evals$FullSem)
evals = read.csv("/Users/jake/Dropbox/Teaching/Student Evaluations/UPS/TenureStudentEvals.csv")
table(evals$FullSem)
evals = transform(evals, CourseTitle=paste(Course, Section, sep=""), FullSem = paste(Semester,Year,sep = ""))
evals = transform(evals, CourseTitle=paste(Course, Section, sep=""), FullSem = paste(Semester,Year,sep = ""))
table(evals$FullSem)
whichOnes = c("Fall2019","Spring2020")
subEvals = subset(evals, FullSem == whichOnes)
table(subEvals$FullSem)
?subset
subEvals = subset(evals, FullSem %in% whichOnes)
table(subEvals$FullSem)
head(subEvals)
subEvals = transform(subEvals, FullCourseName = paste(CourseTitle,FullSem,sep = ""))
head(subEvals)
Qnum = c("Q1a","Q1b","Q1c","Q1d","Q1e","Q1f","Q2a","Q2b","Q2c","Q3a","Q3b","Q3c","Q3d","Q4a","Q4b","Q4c","Q5a","Q5b")
Qtext = c("The instructor was intellectually challenging.",
"The instructor was skilled in helping students master relevant
concepts and skills.",
"The instructor encouraged students to take learning seriously and
to think critically.",
"The instructor encouraged students' intellectual self-reliance and
self-motivation.",
"Class assignments were useful learning tools.",
"The instructor presented material in a clear manner.",
"Overall, the course was well organized.",
"The instructor was well prepared for each class session.",
"The instructor established clear expectations of students'
responsibilities.",
"The instructor showed concern for the students' understanding of
the material.",
"The instructor was respectful of a variety of viewpoints.",
"The instructor was available during office hours and/or by
appointment.",
"The instructor led students to engage the course material.",
"Tests, quizzes, papers, and other coursework, etc., were
consistent with the course's contents and objectives.",
"The instructor provided reasonable preparation for tests, quizzes,
papers, and other coursework.",
"The instructor did a thorough job of evaluating my work.",
"After carefully considering the items above, provide an overall
rating of your instructor.",
"After carefully considering the items above, provide an overall
rating of this course."
)
summaryFrame = data.frame(Qnum = Qnum, Qtext = Qtext)
head(summaryFrame)
summaryFrame = data.frame(Qnum = Qnum, Qtext = Qtext)
head(summaryFrame)
head(subEvals)
i = "160HFall2019"
i
myClass = subset(subEvals, FullCourseName == i)
head(myClass)
apply(myClass,Qnum,mean())
apply(X = myClass,Qnum,mean())
apply(myClass,Qnum,mean
)
myClass
apply(X = myClass,2,mean())
apply(X = myClass,2,mean
)
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
head(myClass)
apply(X = myClass,2,mean)
mean(myClass$Q1a)
summaryFrame = data.frame(matrix(ncol = 2+length(Qnum), nrow = 0))
colnames(summaryFrame) = c("Class","n",Qnum)
head(summaryFrame)
newRow = data.frame(Class = i, n = nrow(myClass))
newRow = cbind(newRow,avgScores)
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = apply(X = myClass,2,mean)
n = nrow(myClass)
newRow = data.frame(Class = i, n = nrow(myClass))
newRow = cbind(newRow,avgScores)
newRow
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = apply(X = myClass,2,mean)
n = nrow(myClass)
newRow = data.frame(Class = i, n = nrow(myClass))
newRow = cbind(newRow,as.numeric(avgScores))
newRow
as.numeric(avgScores)
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = as.numeric(apply(X = myClass,2,mean))
n = nrow(myClass)
newRow = data.frame(Class = i, n = nrow(myClass))
newRow = cbind(newRow,avgScores)
newRow
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = as.numeric(apply(X = myClass,2,mean))
n = nrow(myClass)
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = as.numeric(apply(X = myClass,2,mean))
newRow = data.frame(Class = i, n = nrow(myClass))
newRow
avgScores
t(avgScores)
newRow = cbind(newRow,t(avgScores))
newRow
summaryFrame = rbind(summaryFrame,newRow)
summaryFrame
summaryFrame = data.frame(matrix(ncol = 2+length(Qnum), nrow = 0))
for (i in unique(subEvals$FullCourseName)){
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = as.numeric(apply(X = myClass,2,mean))
newRow = data.frame(Class = i, n = nrow(myClass))
newRow = cbind(newRow,t(avgScores))
summaryFrame = rbind(summaryFrame,newRow)
}
colnames(summaryFrame) = c("Class","n",Qnum)
summaryFrame
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
summaryFrame
t(summaryFrame)
# transpose the data frame
# first remember the names
n <- summaryFrame$name
# transpose all but the first column (name)
summaryFrame <- as.data.frame(t(summaryFrame[,-1]))
colnames(summaryFrame) <- n
summaryFrame$myfactor <- factor(row.names(summaryFrame))
summaryFrame
summaryFrame = data.frame(matrix(ncol = 2+length(Qnum), nrow = 0))
for (i in unique(subEvals$FullCourseName)){
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = as.numeric(apply(X = myClass,2,mean,na.rm = TRUE))
newRow = data.frame(Class = i, n = nrow(myClass))
newRow = cbind(newRow,t(avgScores))
summaryFrame = rbind(summaryFrame,newRow)
}
colnames(summaryFrame) = c("Class","n",Qnum)
# transpose the data frame
# first remember the names
n <- summaryFrame$name
# transpose all but the first column (name)
summaryFrame <- as.data.frame(t(summaryFrame[,-1]))
colnames(summaryFrame) <- n
summaryFrame
summaryFrame = data.frame(matrix(ncol = 2+length(Qnum), nrow = 0))
for (i in unique(subEvals$FullCourseName)){
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = as.numeric(apply(X = myClass,2,mean,na.rm = TRUE))
newRow = data.frame(Class = i, n = nrow(myClass))
newRow = cbind(newRow,t(avgScores))
summaryFrame = rbind(summaryFrame,newRow)
}
colnames(summaryFrame) = c("Class","n",Qnum)
# transpose the data frame
# first remember the names
n <- summaryFrame$name
# transpose all but the first column (name)
summaryFrame <- as.data.frame(t(summaryFrame))
colnames(summaryFrame) <- n
summaryFrame
head(summaryFrame)
summaryFrame = data.frame(matrix(ncol = length(1+unique(subEvals$FullCourseName)), nrow = 1+length(Qnum)))
summaryFrame = data.frame(matrix(0,ncol = length(1+unique(subEvals$FullCourseName)), nrow = 1+length(Qnum)))
length(Qnum)
summaryFrame = data.frame(matrix(ncol = 1+length(unique(subEvals$FullCourseName)), nrow = 1+length(Qnum)))
rownames(summaryFrame) = c(n,Qnum)
summaryFrame
length(Qnum)
rownames(summaryFrame) = c("n",Qnum)
summaryFrame
summaryFrame = data.frame(matrix(ncol = length(unique(subEvals$FullCourseName)), nrow = 1+length(Qnum)))
rownames(summaryFrame) = c("n",Qnum)
summaryFrame
subEvals
unique(subEvals$FullCourseName)
substr(unique(subEvals$FullCourseName), 1, 4)
colnames = substr(unique(subEvals$FullCourseName), 1, 4)
rm(colnames)
summaryFrame = data.frame(matrix(ncol = length(unique(subEvals$FullCourseName)), nrow = 1+length(Qnum)))
rownames(summaryFrame) = c("n",Qnum)
colnames(summaryFrame) = substr(unique(subEvals$FullCourseName), 1, 4)
summaryFrame
i = "301AFall2019"
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
myClass
avgScores = as.numeric(apply(X = myClass,2,mean,na.rm = TRUE))
avgScores
i
substr(i,1,4)
summaryFrame[,substr(i,1,4)]
summaryFrame
summaryFrame[,substr(i,1,4)] = c(10000,myClass)
summaryFrame[,substr(i,1,4)] = c(10000,avgScores)
summaryFrame
summaryFrame = data.frame(matrix(ncol = length(unique(subEvals$FullCourseName)), nrow = 1+length(Qnum)))
rownames(summaryFrame) = c("n",Qnum)
colnames(summaryFrame) = substr(unique(subEvals$FullCourseName), 1, 4)
for (i in unique(subEvals$FullCourseName)){
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = as.numeric(apply(X = myClass,2,mean,na.rm = TRUE))
summaryFrame[,substr(i,1,4)] = c(nrow(myClass),avgScores)
}
summaryFrame
?kable
# Extract summary data from student evals for tables in sabbatical / tenure forms
library(knitr)
knitr::kable(summaryFrame)
knitr::kable(summaryFrame,"latex")
summaryFrame = data.frame(matrix(ncol = length(unique(subEvals$FullCourseName)), nrow = 2+length(Qnum)))
rownames(summaryFrame) = c("n",Qnum,"Average")
colnames(summaryFrame) = substr(unique(subEvals$FullCourseName), 1, 4)
for (i in unique(subEvals$FullCourseName)){
myClass = subset(subEvals, FullCourseName == i, select = Qnum)
avgScores = as.numeric(apply(X = myClass,2,mean,na.rm = TRUE))
summaryFrame[,substr(i,1,4)] = c(nrow(myClass),avgScores,mean(avgScores))
}
knitr::kable(summaryFrame,"latex")
knitr::kable(summaryFrame,"latex",booktabs = T)
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
summaryFrame
knitr::kable(summaryFrame,booktabs = T)
knitr::kable(summaryFrame,booktabs = T)
knitr::kable(summaryFrame,booktabs = T, digits = 2)
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
source('~/Dropbox/Teaching/Student Evaluations/UPS/evalSummaryScript.R', echo=TRUE)
knitr::kable(summaryFrame,booktabs = T,digits = 2)
knitr::kable(summaryFrame,"latex",booktabs = T,digits = 2)
1200/.3
library("Math160UPS")
BerkeleyPlots()
devtools::document()
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
devtools::document()
setwd("~/Dropbox")
BerkeleyPlots()
update_code()
BerkeleyPlots()
library("Math160UPS")
BerkeleyPlots()
BerkeleyPlots()
polls = read.csv(file.choose())
head(polls)
A = c(50,100,10,100,100,12,80,50,80,10,10,10)
B = c(110,100,100,10,80,150,150,10,10)
mean(A)
mean(B)
boxplot(A,B, horizontal = TRUE)
A = c(90,45,25,100,25,30,20,35,100)
B = c(50,115,110,26,130,100,100,150,100,100,105)
mean(A)
B = c(B,300)
mean(B)
boxplot(A,B, horizontal = TRUE)
students = read.csv(file.choose())
head(students)
usethis::use_data(students)
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
usethis::use_data(students)
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
usethis::use_data(students)
devtools::use_data(students)
library(devtools)
use_data(students)
use_data(students,overwrite=TRUE)

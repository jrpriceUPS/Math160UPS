current <- 3
# 2. Initialize the simulation
mu <- rep(0, N)
# 3. Simulate N Markov chain stops
for(i in 1:N){
# Simulate one iteration
sim <- one_mh_iteration_normal(s = s, current = current)
# Record next location
mu[i] <- sim$next_stop
# Reset the current location
current <- sim$next_stop
}
# 4. Return the chain locations
return(data.frame(iteration = c(1:N), mu))
}
parta = mh_tour(20,0.01)
partb = mh_tour(20,10)
partc = mh_tour(1000,0.01)
partd = mh_tour(1000,10)
plot(parta$iteration,parta$mu,"l")
plot(partb$iteration,partb$mu,"l")
plot(partc$iteration,partc$mu,"l")
plot(partd$iteration,partd$mu,"l")
# part f
partf = mh_tour(1000,1)
plot(partf$iteration,partf$mu,"l")
# Exercise 8.6
c(qbeta(.025,4,5),qbeta(.975,4,5)
# Exercise 8.6
c(qbeta(.025,4,5),qbeta(.975,4,5))
# Exercise 8.6
c(qbeta(.025,4,5),qbeta(.975,4,5))
c(qbeta(.2,4,5),qbeta(.8,4,5))
c(qgamma(.025,1,8),qgamma(.975,1,8))
source("~/Dropbox/Teaching/Math 360/demos/posteriorEstimation.R", echo=TRUE)
goodW
quantile(goodW$mu)
quantile(goodW$mu,c(.025,.075))
quantile(goodW$mu,c(.025,.975))
hist(goodW$mu)
betaFixedMu = function(mu,alphaList){
xGrid = seq(0,1,length = 1000)
for (alpha in alphaList) {
lines(xGrid,dbeta(xGrid,alpha,alpha/mu-alpha))
}
}
betaFixedMu(0.014,seq(1,100))
betaFixedMu = function(mu,alphaList){
xGrid = seq(0,1,length = 1000)
plot(xGrid,dbeta(xGrid,alphaList[1],alphaList[1]/mu-alphaList[1]))
for (alpha in alphaList) {
lines(xGrid,dbeta(xGrid,alpha,alpha/mu-alpha))
}
}
betaFixedMu(0.014,seq(1,100))
betaFixedMu(0.014,seq(1,10))
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
betaFixedMu(0.6,seq(1,10))
betaFixedMu(0.6,seq(2,10))
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
betaFixedMu(0.265,seq(2,10))
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
source("~/Dropbox/Research/Research Notes/2023/demoForSam.R", echo=TRUE)
97500000 / 195000000
mu = 0.014
alpha = 2
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = 1
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .1
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .09
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .08
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .087
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .085
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .083
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .082
pbeta(1/40000,alpha,alpha / mu - alpha)
alpha = .0825
pbeta(1/40000,alpha,alpha / mu - alpha)
plot(xGrid,dbeta(xGrid, alpha, alpha / mu - alpha))
seq(0,1,length = 1000)
mu = 0.014
alpha = .0825
beta = alpha / mu - alpha
pbeta(1/40000,alpha,beta)
plot(xGrid,dbeta(xGrid, alpha, alpha / mu - alpha))
xGrid = seq(0,1,length = 1000)
mu = 0.014
alpha = .0825
beta = alpha / mu - alpha
pbeta(1/40000,alpha,beta)
plot(xGrid,dbeta(xGrid, alpha, alpha / mu - alpha))
plot(xGrid,dbeta(xGrid, alpha, alpha / mu - alpha),"l")
beta
1 - pbeta(0.4, 4, 3)
0.8208 / (1 - 0.8208)
1 - pbeta(0.4, 1, 0.8)
0.6645 / (1 - 0.6645)
4.58 / 1.98
library(bayesrules)
library(tidyverse)
# inspect data to find binomial data
data("pulse_of_the_nation")
head(pulse_of_the_nation)
pulse_of_the_nation %>%
tabyl(climate_change)
pulse_of_the_nation %>%
tabyl(climate_change) %>%
adorn_totals(c("col","row"))
# STEP 1: DEFINE the model
bb_model <- "
data {
int<lower = 0, upper = 1000> Y;
}
parameters {
real<lower = 0, upper = 1> pi;
}
model {
Y ~ binomial(1000, pi);
pi ~ beta(1, 2);
}
"
bb_sim <- stan(model_code = bb_model, data = list(Y = 150),
chains = 4, iter = 10000, seed = 84735)
mcmc_trace(bb_sim, pars = "pi", size = 0.1)
# Density overlay plot of the Markov chain values
mcmc_dens_overlay(bb_sim, pars = "pi") +
yaxis_text(TRUE)
mcmc_acf(bb_sim, pars = "pi")
neff_ratio(bb_sim, pars = c("pi"))
rhat(bb_sim, pars = "pi")
bb_sim
neff_ratio(bb_sim, pars = c("pi")) * 20000
# 8.17: estimation and hyp. testing
tidy(bb_sim)
library(rstan)
library(broom.mixed)
# 8.17: estimation and hyp. testing
tidy(bb_sim)
install.packages("broom.mixed")
library(bayesrules)
library(tidyverse)
library(rstan)
library(bayesplot)
library(broom.mixed)
library(janitor)
# 8.17: estimation and hyp. testing
tidy(bb_sim)
# 8.17: estimation and hyp. testing
tidy(bb_sim,conf.int = TRUE, conf.level = 0.95)
# .129 to .173
mcmc_dens(bb_sim)
# .129 to .173
mcmc_dens(bb_sim, pars = "pi")
mcmcDf = as.data.frame(bb_sim, pars = "lp__", include = FALSE)
head(mcmcDf)
# .129 to .173
quantile(mcmcDf$pi, c(.025,.975))
# part b
mcmcDf %>%
mutate(aboveH0 = pi > 0.1) %>%
tabyl(aboveH0)
# part b
mcmcDf %>%
mutate(aboveH0 = pi > 0.14) %>%
tabyl(aboveH0)
# part b
mcmcDf %>%
mutate(aboveH0 = pi > 0.1) %>%
tabyl(aboveH0)
# 8.18: Prediction
mcmcDf %>%
mutate(newSample = rbinom(1, size = 100,pi))
# 8.18: Prediction
mcmcDf = mcmcDf %>%
mutate(y_predict = rbinom(length(pi), size = 100, prob = pi))
ggplot(bb_chains_df, aes(x = y_predict)) +
stat_count()
ggplot(mcmcdf, aes(x = y_predict)) +
stat_count()
ggplot(mcmcDf, aes(x = y_predict)) +
stat_count()
mcmcDf %>%
mutate(moreThan20 = y_predict > 20) %>%
tabyl(moreThan20)
# establish the prior
students = data.frame(location = c("rural","urban"))
prior = c(.085,.915)
students
students_sim = sample_n(students, # grab a sample of rural and urban students
size = 100000, # 100,000 students in the sample
weight = prior, # 8.5% of the time pick "rural", 91.5% of the time pick urban
replace = TRUE)
head(students_sim)
nrow(students_sim)
# check that the proportions are right
students_sim %>%
tabyl(location) %>%
adorn_totals("row")
# add another column to the simulation that indicates the chance a student is LGBT
students_sim = students_sim %>%
mutate(chanceLGBT = case_when(location == "rural" ~ 0.1,
location == "urban" ~ 0.105))
head(students_sim)
data = c("LGBT", "Not LGBT")
data = c("LGBT", "Not LGBT")
students_sim = students_sim %>%
group_by(1:n()) %>%
mutate(sexuality = sample(data, size = 1,
prob = c(chanceLGBT,1-chanceLGBT)))
head(students_sim)
# look at a new table
students_sim %>%
tabyl(location,sexuality) %>%
adorn_totals(c("col","row"))
# make a bar plot
ggplot(students_sim,aes(x = location, fill = sexuality)) +
geom_bar(position = "fill")
# pull out *only* the LGBT students and ask what % of them were urban vs rural
# that's the posterior!
students_sim %>%
filter(sexuality == "LGBT") %>%
tabyl(location) %>%
adorn_totals("row")
rm(list = ls())
graphics.off()
data(iris)
head(iris)
?iris
grapes = read.csv(file.choose())
head(grapes)
grapes2 = read.csv("/Users/jrprice/Desktop/grapes.csv")
head(grapes2)
grapes3 = read.csv(file.choose())
head(grapes3)
rivers = read_table("http://www.statsci.org/data/oz/nzrivers.txt")
head(rivers)
rivers = read.table("http://www.statsci.org/data/oz/nzrivers.txt")
head(rivers)
rivers = read.table("http://www.statsci.org/data/oz/nzrivers.txt",header = TRUE)
head(rivers)
iris$Sepal.Length
attach(iris)
Sepal.Width
?tapply
Sepal.Length
Species
tapply(Sepal.Length, Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
myMeans = tapply(iris$Sepal.Length, iris$Species, mean)
myMeans
mySDs = tapply(iris$Sepal.Length, iris$Species, sd)
mySDs
myN = tapply(iris$Sepal.Length,iris$Species, length)
myN
cbind(myN, myMeans, mySDs)
round(cbind(myN, myMeans, mySDs),2)
meanPetal = tapply(iris$Petal.Length,iris$Species, mean)
sdPetal = tapply(iris$Petal.Length,iris$Species, sd)
nPetal = tapply(iris$Petal.Length,iris$Species, length)
round(cbind(nPetal, meanPetal, sdPetal),2)
petalTable = round(cbind(nPetal, meanPetal, sdPetal),2)
colnames(petalTable) = c("Observations","Mean","St. Dev.")
petalTable
Â¬rm(list = ls())
rm(list = ls())
graphics.off()
-4-sqrt(76)
-2/3-sqrt(76)/6
-2/3+sqrt(76)/6
-2/3-sqrt(76)/6
17170 - 623 - 6289 - 3087 - 1200 - 988 - 189
2&-127
2^-127
2^11
2^-1024
2^-1025
2^-1026
2^-2000
2^-1500
2^-1300
2^-1200
2^-1100
2^-1050
2^-1075
2^-1052
2^-1060
2^-1065
2^-1070
2^-1071
2^-1072
2^-1073
2^-1074
2^-1075
double.xmin
.Machine
2^1024
2^1023
2^1023.5
2^1023.875
2^1023.8752.9^1023
2.9^1023
2.5^1023
2^1023
2^-1023
2^-1024
2^-1023
.5^-1023
.25^-1023
2^-1027
log2(1.175*10^-38)
log2(3.403*10^38)
2^128
log2(2.225*10^-308)
log2(1.79*10^308)
2^-23
2^-52
log2(10^10)
log2(10^9)
log2(10^-16)
log2(10^-10)
1500/55000
2200/55000
co2
View(co2)
as.data.frame(co2)
co2$x
myFrame = as.data.frame(co2)
myFrame$x
x[:]
x[]
co2[:]
View(myFrame)
write.csv(myFrame)
?write.csv
write.csv(myFrame,"maunaLoa")
write.csv(myFrame,"maunaLoa.csv")
co2
2^-127
2*2128
2*2^128
2^11
2048-1023
2^-1023
2^1025
2^1024
2^1023
2^1023*1.999
2^1023*1.999999999999
2^-52
sectionB = c("Hazuki","Emory","Jamison","Miguel","Phelan","Morgan","Katherine","Wren","Izzy Jones","Margo","Haley","Izzy Jimenez Meyers","Sabrina","Torin","Matthew","Juliet","Alexander","William","Allison","Jeremy","Catherine","Mason","Kate","Quinn","Skye","Lennon")
sample(sectionB
)
sample(sectionB
)
sample(sectionB
)
sample(sectionB
)
sample(sectionB
)
sample(sectionB
)
sectionC = c("Cam",Liam","Brendan","Rory","Ella","Eli","Cecilia","Chaz","Zyra","Camden","Esme","Cat","Saranan","Sarah","McKenna","Lucy","Sam","Evan","Jason","Anna","Jayden","Matthew","Mia","Claire","Joseph","Taro","Layla","Nathan")
sectionC = c("Cam","Liam","Brendan","Rory","Ella","Eli","Cecilia","Chaz","Zyra","Camden","Esme","Cat","Saranan","Sarah","McKenna","Lucy","Sam","Evan","Jason","Anna","Jayden","Matthew","Mia","Claire","Joseph","Taro","Layla","Nathan")
sample(sectionC)
sample(sectionC)
rm(list = ls())
students = read.csv(file.choos())
students = read.csv(file.choose())
head(students)
setwd("~/Dropbox/Teaching/Math 160/Math160UPS")
library(devtools)
library(usethis)
usethis::use_data(students,overwrite = TRUE)
devtools::document()
rm(students)
library("Math160UPS")
data(students)
rm(students)
plot(students$ShoeSz,students$Height)
hist(students$NumShoes)
plot(students$YoungestParent,students$OldestParent)
plot(students$StartSalary)
hist(students$StartSalary)
boxplot(students$StartSalary)
sectionB
data("whickham")
View(whickham)
View(whickhamClass
)
table(students$Coffeemstudents$MacPC)
table(students$Coffee,students$MacPC)
table(students$Coffee,students$MacPC,exclude = "")
table(students$Coffee,students$MacPC,exclude = c("","Other"))
cancerTable()
data(hospitals)
partATable = table(hospitals$hospital,hospitals$survival)
proportionTableA = prop.table(partATable, 2)
barplot(proportionTableA, legend.text = TRUE)
partATable = table(hospitals$survival,hospitals$hospital)
proportionTableA = prop.table(partATable, 2)
barplot(proportionTableA, legend.text = TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
source("~/Dropbox/Teaching/Math 160/Exams/Midterm 1/midterm1_q1.R", echo=TRUE)
sectionB = c("Hazuki","Emory","Jamison","Miguel","Phelan","Morgan","Katherine","Wren","Izzy Jones","Margo","Haley","Izzy Meyers Jimimez","Sabrina","Torin","Matthew","Alexander","William","Allison","Jeremy","Catherine","Mason","Kate","Quinn","Lennon")
sample(sectionB)
sample(sectionB)
sample(sectionB)
sample(sectionB)
sectionC = c("Cam","Liam","Brendan","Rory","Ella","Eli","Cecilia","Chaz","Zyra","Camden","Esme","Cat","Saranan","Sarah","McKenna","Lucy","Sam","Evan","Jason","Anna","Jayden","Matthew","Mia","Claire","Joseph","Taro","Layla","Nathan")
sample(sectionC)
sample(sectionC)
sample(sectionC)
sample(sectionC)
9.375*10^5/4
(9.375*10^5)^2
(9.375*10^5)^2/(4.2*10^9)
(9.375*10^5)*log2((9.375*10^5))
(9.375*10^5)*log2((9.375*10^5))/(4.2*10^9)
209.2634/0.004428227
data("SAT")
head(SAT)
data(SATclass)
head(SATclass)
sin(pi^2)
sin(pi^2)+cos(pi/2)
sin(sqrt(pi)^2)+cos(pi/2)
data("isotope_and_T")
plot(temperature_correced~delta18O, data = isotope_and_T)
plot(temperature_corrected~delta18O, data = isotope_and_T)
cor(isotope_and_T$temperature_corrected, isotope_and_T$delta18O)
cor(isotope_and_T$temperature_corrected, isotope_and_T$delta18O, use = "complete.obs")
plot(students$ShoeSz,students$Sleep)
cor(students$ShoeSz, students$Sleep, use = "complete.obs")
lm(temperature_corrected~delta18O, data = isotope_and_T)
esmesModel = lm(temperature_corrected~delta18O, data = isotope_and_T)
abline(esmesModel)
summary(esmesModel)
plot(esmesModel$residuals, esmesModel$fitted.values)
plot(esmesModel$residuals ~ esmesModel$fitted.values)
plot(Height ~ ShoeSz, data = students)
lm(Height ~ ShoeSz, data = students)
plot(students$Height ~ students$ShoeSz)
plot(students$ShoeSz, students$Height)
hazukisModel = lm(Height ~ ShoeSz, data = students)
abline(hazukisModel)
hazukisModel
hazukisModel$residuals
View(students)
hazukisModel
1.758 * 9 + 51.039
hazukisModel$fitted.values
hazukisModel$residuals
plot(hazukisModel$residuals ~ hazukisModel$fitted.values)
abline(0)
abline(0,0)
plot(UPSGPA ~ HSGPA, data = students)
myNewDataset = subset(students, HSGPA > 1)
table(students$HSState)
stateTable = table(students$HSState)
barplot(stateTable)
table(students$HSState, students$Gender)
hazukisTable = table(students$HSState, students$Gender)
prop.table(hazukisTable)
prop.table(hazukisTable,1)
prop.table(hazukisTable,2)
athletes = subset(students, VarAthlete == "Yes")
head(athletes)
boxplot(Height ~ Coffee, data = athletes)
2^10
data(ice_core)
plot(ice_core$Age_yearBP,ice_core$Temperature, type = "l")
par(new = TRUE)
plot(ice_core$Age_yearBP,ice_core$CO2_ppmv,col = 'orange', xlab = '',ylab = '',axis =FALSE)
axis(4,col.axis = "orange")
par(new = TRUE)
plot(ice_core$Age_yearBP,ice_core$CO2_ppmv,col = 'orange',xlab = '',ylab = '', axis = FALSE)
axis(4,col.axis = "orange")
dbinom(0,24,1/52)
dbinom(0,24,2/52)
dbinom(0,24,3/52)
x= 1.12597
x= 1.12597
y = pi
x*sin(y)
cos(x)+sin(y^2)
sin(y^2)
cos(x)
